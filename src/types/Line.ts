/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/Meta/Modes": {
    /** Gets a list of valid modes */
    get: operations["Line_MetaModes"];
  };
  "/Meta/Severity": {
    /** Gets a list of valid severity codes */
    get: operations["Line_MetaSeverity"];
  };
  "/Meta/DisruptionCategories": {
    /** Gets a list of valid disruption categories */
    get: operations["Line_MetaDisruptionCategories"];
  };
  "/Meta/ServiceTypes": {
    /** Gets a list of valid ServiceTypes to filter on */
    get: operations["Line_MetaServiceTypes"];
  };
  "/{ids}": {
    /** Gets lines that match the specified line ids. */
    get: operations["Line_GetByPathIds"];
  };
  "/Mode/{modes}": {
    /** Gets lines that serve the given modes. */
    get: operations["Line_GetByModeByPathModes"];
  };
  "/Route": {
    /** Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route. */
    get: operations["Line_RouteByQueryServiceTypes"];
  };
  "/{ids}/Route": {
    /** Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route. */
    get: operations["Line_LineRoutesByIdsByPathIdsQueryServiceTypes"];
  };
  "/Mode/{modes}/Route": {
    /** Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route */
    get: operations["Line_RouteByModeByPathModesQueryServiceTypes"];
  };
  "/{id}/Route/Sequence/{direction}": {
    /** Gets all valid routes for given line id, including the sequence of stops on each route. */
    get: operations["Line_RouteSequenceByPathIdPathDirectionQueryServiceTypesQueryExcludeCrowding"];
  };
  "/{ids}/Status/{startDate}/to/{endDate}": {
    /** Gets the line status for given line ids during the provided dates e.g Minor Delays */
    get: operations["Line_StatusByPathIdsPathStartDatePathEndDateQueryDetail"];
  };
  "/{ids}/Status": {
    /** Gets the line status of for given line ids e.g Minor Delays */
    get: operations["Line_StatusByIdsByPathIdsQueryDetail"];
  };
  "/Search/{query}": {
    /** Search for lines or routes matching the query string */
    get: operations["Line_SearchByPathQueryQueryModesQueryServiceTypes"];
  };
  "/Status/{severity}": {
    /** Gets the line status for all lines with a given severity A list of valid severity codes can be obtained from a call to Line/Meta/Severity */
    get: operations["Line_StatusBySeverityByPathSeverity"];
  };
  "/Mode/{modes}/Status": {
    /** Gets the line status of for all lines for the given modes */
    get: operations["Line_StatusByModeByPathModesQueryDetailQuerySeverityLevel"];
  };
  "/{id}/StopPoints": {
    /** Gets a list of the stations that serve the given line id */
    get: operations["Line_StopPointsByPathIdQueryTflOperatedNationalRailStationsOnly"];
  };
  "/{id}/Timetable/{fromStopPointId}": {
    /** Gets the timetable for a specified station on the give line */
    get: operations["Line_TimetableByPathFromStopPointIdPathId"];
  };
  "/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}": {
    /** Gets the timetable for a specified station on the give line with specified destination */
    get: operations["Line_TimetableToByPathFromStopPointIdPathIdPathToStopPointId"];
  };
  "/{ids}/Disruption": {
    /** Get disruptions for the given line ids */
    get: operations["Line_DisruptionByPathIds"];
  };
  "/Mode/{modes}/Disruption": {
    /** Get disruptions for all lines of the given modes. */
    get: operations["Line_DisruptionByModeByPathModes"];
  };
  "/{ids}/Arrivals/{stopPointId}": {
    /** Get the list of arrival predictions for given line ids based at the given stop */
    get: operations["Line_ArrivalsWithStopPointByPathIdsPathStopPointIdQueryDirectionQueryDestina"];
  };
  "/{ids}/Arrivals": {
    /** Get the list of arrival predictions for given line ids based at the given stop */
    get: operations["Line_ArrivalsByPathIds"];
  };
  "/*": {
    /** Forwards any remaining requests to the back-end */
    get: operations["Forward_Proxy"];
  };
}

export interface components {
  schemas: {
    Tfl: {
      isTflService: boolean;
      isFarePaying: boolean;
      isScheduledService: boolean;
      modeName: string;
    };
    "Tfl-2": {
      modeName: string;
      /** Format: int32 */
      severityLevel: number;
      description: string;
    };
    "Tfl-3": {
      /** @description Time in 24hr format with 15 minute intervals e.g. 0500-0515, 0515-0530 etc. */
      timeSlice: string;
      /**
       * Format: int32
       * @description Count of passenger flow towards a platform
       */
      value: number;
    };
    "Tfl-4": {
      /** @description The Line Name e.g. "Victoria" */
      line: string;
      /** @description Direction of the Line e.g. NB, SB, WB etc. */
      lineDirection: string;
      /** @description Direction displayed on the platform e.g. NB, SB, WB etc. */
      platformDirection: string;
      /** @description Direction in regards to Journey Planner i.e. inbound or outbound */
      direction: string;
      /** @description Naptan of the adjacent station */
      naptanTo: string;
      /** @description Time in 24hr format with 15 minute intervals e.g. 0500-0515, 0515-0530 etc. */
      timeSlice: string;
      /**
       * Format: int32
       * @description Scale between 1-6,
       *              1 = Very quiet, 2 = Quiet, 3 = Fairly busy, 4 = Busy, 5 = Very busy, 6 = Exceptionally busy
       */
      value: number;
    };
    "Tfl-5": {
      /** @description Busiest times at a station (static information) */
      passengerFlows: components["schemas"]["Tfl-3"][];
      /** @description Train Loading on a scale 1-6, 1 being "Very quiet" and 6 being "Exceptionally busy" (static information) */
      trainLoadings: components["schemas"]["Tfl-4"][];
    };
    "Tfl-6": {
      id: string;
      name: string;
      uri: string;
      fullName: string;
      type: string;
      crowding: components["schemas"]["Tfl-5"];
      /** @enum {string} */
      routeType:
        | "Unknown"
        | "All"
        | "Cycle Superhighways"
        | "Quietways"
        | "Cycleways"
        | "Mini-Hollands"
        | "Central London Grid"
        | "Streetspace Route";
      /** @enum {string} */
      status:
        | "Unknown"
        | "All"
        | "Open"
        | "In Progress"
        | "Planned"
        | "Planned - Subject to feasibility and consultation."
        | "Not Open";
    };
    "Tfl-7": {
      naptanIdReference: string;
      stationAtcoCode: string;
      lineIdentifier: string[];
    };
    "Tfl-8": {
      modeName: string;
      lineIdentifier: string[];
    };
    "Tfl-9": {
      category: string;
      key: string;
      sourceSystemKey: string;
      value: string;
      /** Format: date-time */
      modified: string;
    };
    "Tfl-10": {
      /** @description A unique identifier. */
      id: string;
      /** @description The unique location of this resource. */
      url: string;
      /** @description A human readable name. */
      commonName: string;
      /**
       * Format: double
       * @description The distance of the place from its search point, if this is the result
       *             of a geographical search, otherwise zero.
       */
      distance: number;
      /** @description The type of Place. See /Place/Meta/placeTypes for possible values. */
      placeType: string;
      /** @description A bag of additional key/value pairs with extra information about this place. */
      additionalProperties: components["schemas"]["Tfl-9"][];
      children: components["schemas"]["Tfl-10"][];
      childrenUrls: string[];
      /**
       * Format: double
       * @description WGS84 latitude of the location.
       */
      lat: number;
      /**
       * Format: double
       * @description WGS84 longitude of the location.
       */
      lon: number;
    };
    "Tfl-11": {
      naptanId: string;
      platformName: string;
      /** @description The indicator of the stop point e.g. "Stop K" */
      indicator: string;
      /** @description The stop letter, if it could be cleansed from the Indicator e.g. "K" */
      stopLetter: string;
      modes: string[];
      icsCode: string;
      smsCode: string;
      stopType: string;
      stationNaptan: string;
      accessibilitySummary: string;
      hubNaptanCode: string;
      lines: components["schemas"]["Tfl-6"][];
      lineGroup: components["schemas"]["Tfl-7"][];
      lineModeGroups: components["schemas"]["Tfl-8"][];
      fullName: string;
      naptanMode: string;
      status: boolean;
      /** @description A unique identifier. */
      id: string;
      /** @description The unique location of this resource. */
      url: string;
      /** @description A human readable name. */
      commonName: string;
      /**
       * Format: double
       * @description The distance of the place from its search point, if this is the result
       *             of a geographical search, otherwise zero.
       */
      distance: number;
      /** @description The type of Place. See /Place/Meta/placeTypes for possible values. */
      placeType: string;
      /** @description A bag of additional key/value pairs with extra information about this place. */
      additionalProperties: components["schemas"]["Tfl-9"][];
      children: components["schemas"]["Tfl-10"][];
      childrenUrls: string[];
      /**
       * Format: double
       * @description WGS84 latitude of the location.
       */
      lat: number;
      /**
       * Format: double
       * @description WGS84 longitude of the location.
       */
      lon: number;
    };
    "Tfl-12": {
      /** Format: int32 */
      ordinal: number;
      stopPoint: components["schemas"]["Tfl-11"];
    };
    "Tfl-13": {
      /** @description The Id of the route */
      id: string;
      /** @description The Id of the Line */
      lineId: string;
      /** @description The route code */
      routeCode: string;
      /** @description Name such as "72" */
      name: string;
      /** @description The co-ordinates of the route's path as a geoJSON lineString */
      lineString: string;
      /** @description Inbound or Outbound */
      direction: string;
      /** @description The name of the Origin StopPoint */
      originationName: string;
      /** @description The name of the Destination StopPoint */
      destinationName: string;
      /**
       * Format: date-time
       * @description The DateTime that the Service containing this Route is valid until.
       */
      validTo: string;
      /**
       * Format: date-time
       * @description The DateTime that the Service containing this Route is valid from.
       */
      validFrom: string;
      routeSectionNaptanEntrySequence: components["schemas"]["Tfl-12"][];
    };
    /** @description Represents a disruption to a route within the transport network. */
    "Tfl-14": {
      /**
       * @description Gets or sets the category of this dispruption.
       * @enum {string}
       */
      category:
        | "Undefined"
        | "RealTime"
        | "PlannedWork"
        | "Information"
        | "Event"
        | "Crowding"
        | "StatusAlert";
      /** @description Gets or sets the disruption type of this dispruption. */
      type: string;
      /** @description Gets or sets the description of the category. */
      categoryDescription: string;
      /** @description Gets or sets the description of this disruption. */
      description: string;
      /** @description Gets or sets the summary of this disruption. */
      summary: string;
      /** @description Gets or sets the additionaInfo of this disruption. */
      additionalInfo: string;
      /**
       * Format: date-time
       * @description Gets or sets the date/time when this disruption was created.
       */
      created: string;
      /**
       * Format: date-time
       * @description Gets or sets the date/time when this disruption was last updated.
       */
      lastUpdate: string;
      /** @description Gets or sets the routes affected by this disruption */
      affectedRoutes: components["schemas"]["Tfl-13"][];
      /** @description Gets or sets the stops affected by this disruption */
      affectedStops: components["schemas"]["Tfl-11"][];
      /** @description Text describing the closure type */
      closureText: string;
    };
    /** @description Represents a period for which a planned works is valid. */
    "Tfl-15": {
      /**
       * Format: date-time
       * @description Gets or sets the start date.
       */
      fromDate: string;
      /**
       * Format: date-time
       * @description Gets or sets the end date.
       */
      toDate: string;
      /** @description If true is a realtime status rather than planned or info */
      isNow: boolean;
    };
    "Tfl-16": {
      /** Format: int32 */
      id: number;
      lineId: string;
      /** Format: int32 */
      statusSeverity: number;
      statusSeverityDescription: string;
      reason: string;
      /** Format: date-time */
      created: string;
      /** Format: date-time */
      modified: string;
      validityPeriods: components["schemas"]["Tfl-15"][];
      disruption: components["schemas"]["Tfl-14"];
    };
    /** @description Description of a Route used in Route search results. */
    "Tfl-17": {
      /** @description The route code */
      routeCode: string;
      /** @description Name such as "72" */
      name: string;
      /** @description Inbound or Outbound */
      direction: string;
      /** @description The name of the Origin StopPoint */
      originationName: string;
      /** @description The name of the Destination StopPoint */
      destinationName: string;
      /** @description The Id (NaPTAN code) of the Origin StopPoint */
      originator: string;
      /** @description The Id (NaPTAN code) or the Destination StopPoint */
      destination: string;
      /** @description Regular or Night */
      serviceType: string;
      /**
       * Format: date-time
       * @description The DateTime that the Service containing this Route is valid until.
       */
      validTo: string;
      /**
       * Format: date-time
       * @description The DateTime that the Service containing this Route is valid from.
       */
      validFrom: string;
    };
    "Tfl-18": {
      name: string;
      uri: string;
    };
    "Tfl-19": {
      id: string;
      name: string;
      modeName: string;
      disruptions: components["schemas"]["Tfl-14"][];
      /** Format: date-time */
      created: string;
      /** Format: date-time */
      modified: string;
      lineStatuses: components["schemas"]["Tfl-16"][];
      routeSections: components["schemas"]["Tfl-17"][];
      serviceTypes: components["schemas"]["Tfl-18"][];
      crowding: components["schemas"]["Tfl-5"];
    };
    "Tfl-20": {
      /** Format: int32 */
      routeId: number;
      parentId: string;
      stationId: string;
      icsId: string;
      topMostParentId: string;
      direction: string;
      towards: string;
      modes: string[];
      stopType: string;
      stopLetter: string;
      zone: string;
      accessibilitySummary: string;
      hasDisruption: boolean;
      lines: components["schemas"]["Tfl-6"][];
      status: boolean;
      id: string;
      url: string;
      name: string;
      /** Format: double */
      lat: number;
      /** Format: double */
      lon: number;
    };
    "Tfl-21": {
      lineId: string;
      lineName: string;
      direction: string;
      /**
       * Format: int32
       * @description The id of this branch.
       */
      branchId: number;
      /**
       * @description The ids of the next branch(es) in the sequence. Note that the next and previous branch id can be
       *             identical in the case of a looped route e.g. the Circle line.
       */
      nextBranchIds: number[];
      /**
       * @description The ids of the previous branch(es) in the sequence. Note that the next and previous branch id can be
       *             identical in the case of a looped route e.g. the Circle line.
       */
      prevBranchIds: number[];
      stopPoint: components["schemas"]["Tfl-20"][];
      /** @enum {string} */
      serviceType: "Regular" | "Night";
    };
    "Tfl-22": {
      name: string;
      naptanIds: string[];
      serviceType: string;
    };
    "Tfl-23": {
      lineId: string;
      lineName: string;
      direction: string;
      isOutboundOnly: boolean;
      mode: string;
      lineStrings: string[];
      stations: components["schemas"]["Tfl-20"][];
      stopPointSequences: components["schemas"]["Tfl-21"][];
      orderedLineRoutes: components["schemas"]["Tfl-22"][];
    };
    "Tfl-24": {
      /** Format: int32 */
      routeId: number;
      direction: string;
      destination: string;
      fromStation: string;
      toStation: string;
      serviceType: string;
      vehicleDestinationText: string;
    };
    "Tfl-25": {
      /** Format: int32 */
      id: number;
    };
    "Tfl-26": {
      lineId: string;
      mode: string;
      lineName: string;
      lineRouteSection: components["schemas"]["Tfl-24"][];
      matchedRouteSections: components["schemas"]["Tfl-25"][];
      matchedStops: components["schemas"]["Tfl-20"][];
      id: string;
      url: string;
      name: string;
      /** Format: double */
      lat: number;
      /** Format: double */
      lon: number;
    };
    "Tfl-27": {
      input: string;
      searchMatches: components["schemas"]["Tfl-26"][];
    };
    "Tfl-28": {
      stopId: string;
      /** Format: double */
      timeToArrival: number;
    };
    "Tfl-29": {
      id: string;
      intervals: components["schemas"]["Tfl-28"][];
    };
    "Tfl-30": {
      hour: string;
      minute: string;
      /** Format: int32 */
      intervalId: number;
    };
    "Tfl-31": {
      hour: string;
      minute: string;
    };
    "Tfl-32": {
      /** Format: double */
      lowestFrequency: number;
      /** Format: double */
      highestFrequency: number;
    };
    "Tfl-33": {
      /** @enum {string} */
      type: "Normal" | "FrequencyHours" | "FrequencyMinutes" | "Unknown";
      fromTime: components["schemas"]["Tfl-31"];
      toTime: components["schemas"]["Tfl-31"];
      frequency: components["schemas"]["Tfl-32"];
    };
    "Tfl-34": {
      name: string;
      knownJourneys: components["schemas"]["Tfl-30"][];
      firstJourney: components["schemas"]["Tfl-30"];
      lastJourney: components["schemas"]["Tfl-30"];
      periods: components["schemas"]["Tfl-33"][];
    };
    "Tfl-35": {
      stationIntervals: components["schemas"]["Tfl-29"][];
      schedules: components["schemas"]["Tfl-34"][];
    };
    "Tfl-36": {
      departureStopId: string;
      routes: components["schemas"]["Tfl-35"][];
    };
    "Tfl-37": {
      description: string;
      uri: string;
    };
    "Tfl-38": {
      disambiguationOptions: components["schemas"]["Tfl-37"][];
    };
    "Tfl-39": {
      lineId: string;
      lineName: string;
      direction: string;
      pdfUrl: string;
      stations: components["schemas"]["Tfl-20"][];
      stops: components["schemas"]["Tfl-20"][];
      timetable: components["schemas"]["Tfl-36"];
      disambiguation: components["schemas"]["Tfl-38"];
      statusErrorMessage: string;
    };
    "Tfl-40": {
      countdownServerAdjustment: string;
      /** Format: date-time */
      source: string;
      /** Format: date-time */
      insert: string;
      /** Format: date-time */
      read: string;
      /** Format: date-time */
      sent: string;
      /** Format: date-time */
      received: string;
    };
    /** @description DTO to capture the prediction details */
    "Tfl-41": {
      /** @description The identitier for the prediction */
      id: string;
      /**
       * Format: int32
       * @description The type of the operation (1: is new or has been updated, 2: should be deleted from any client cache)
       */
      operationType: number;
      /** @description The actual vehicle in transit (for train modes, the leading car of the rolling set) */
      vehicleId: string;
      /** @description Identifier for the prediction */
      naptanId: string;
      /** @description Station name */
      stationName: string;
      /** @description Unique identifier for the Line */
      lineId: string;
      /** @description Line Name */
      lineName: string;
      /** @description Platform name (for bus, this is the stop letter) */
      platformName: string;
      /** @description Direction (unified to inbound/outbound) */
      direction: string;
      /** @description Bearing (between 0 to 359) */
      bearing: string;
      /** @description Naptan Identifier for the prediction's destination */
      destinationNaptanId: string;
      /** @description Name of the destination */
      destinationName: string;
      /**
       * Format: date-time
       * @description Timestamp for when the prediction was inserted/modified (source column drives what objects are broadcast on each iteration)
       */
      timestamp: string;
      /**
       * Format: int32
       * @description Prediction of the Time to station in seconds
       */
      timeToStation: number;
      /** @description The current location of the vehicle. */
      currentLocation: string;
      /** @description Routing information or other descriptive text about the path of the vehicle towards the destination */
      towards: string;
      /**
       * Format: date-time
       * @description The expected arrival time of the vehicle at the stop/station
       */
      expectedArrival: string;
      /**
       * Format: date-time
       * @description The expiry time for the prediction
       */
      timeToLive: string;
      /** @description The mode name of the station/line the prediction relates to */
      modeName: string;
      timing: components["schemas"]["Tfl-40"];
    };
    MetaModesGet200ApplicationJsonResponse: components["schemas"]["Tfl"][];
    MetaModesGet200TextJsonResponse: components["schemas"]["Tfl"][];
    MetaModesGet200ApplicationXmlResponse: components["schemas"]["Tfl"][];
    MetaModesGet200TextXmlResponse: components["schemas"]["Tfl"][];
    Get200ApplicationJsonResponse: { [key: string]: unknown };
    MetaSeverityGet200ApplicationJsonResponse: components["schemas"]["Tfl-2"][];
    MetaSeverityGet200TextJsonResponse: components["schemas"]["Tfl-2"][];
    MetaSeverityGet200ApplicationXmlResponse: components["schemas"]["Tfl-2"][];
    MetaSeverityGet200TextXmlResponse: components["schemas"]["Tfl-2"][];
    MetaDisruptionCategoriesGet200ApplicationJsonResponse: string[];
    MetaDisruptionCategoriesGet200TextJsonResponse: string[];
    MetaDisruptionCategoriesGet200ApplicationXmlResponse: string[];
    MetaDisruptionCategoriesGet200TextXmlResponse: string[];
    MetaServiceTypesGet200ApplicationJsonResponse: string[];
    MetaServiceTypesGet200TextJsonResponse: string[];
    MetaServiceTypesGet200ApplicationXmlResponse: string[];
    MetaServiceTypesGet200TextXmlResponse: string[];
    "ids-Get200ApplicationJsonResponse": components["schemas"]["Tfl-19"][];
    "ids-Get200TextJsonResponse": components["schemas"]["Tfl-19"][];
    "ids-Get200ApplicationXmlResponse": components["schemas"]["Tfl-19"][];
    "ids-Get200TextXmlResponse": components["schemas"]["Tfl-19"][];
    "Mode-modes-Get200ApplicationJsonResponse": components["schemas"]["Tfl-19"][];
    "Mode-modes-Get200TextJsonResponse": components["schemas"]["Tfl-19"][];
    "Mode-modes-Get200ApplicationXmlResponse": components["schemas"]["Tfl-19"][];
    "Mode-modes-Get200TextXmlResponse": components["schemas"]["Tfl-19"][];
    RouteGet200ApplicationJsonResponse: components["schemas"]["Tfl-19"][];
    RouteGet200TextJsonResponse: components["schemas"]["Tfl-19"][];
    RouteGet200ApplicationXmlResponse: components["schemas"]["Tfl-19"][];
    RouteGet200TextXmlResponse: components["schemas"]["Tfl-19"][];
    "ids-RouteGet200ApplicationJsonResponse": components["schemas"]["Tfl-19"][];
    "ids-RouteGet200TextJsonResponse": components["schemas"]["Tfl-19"][];
    "ids-RouteGet200ApplicationXmlResponse": components["schemas"]["Tfl-19"][];
    "ids-RouteGet200TextXmlResponse": components["schemas"]["Tfl-19"][];
    "Mode-modes-RouteGet200ApplicationJsonResponse": components["schemas"]["Tfl-19"][];
    "Mode-modes-RouteGet200TextJsonResponse": components["schemas"]["Tfl-19"][];
    "Mode-modes-RouteGet200ApplicationXmlResponse": components["schemas"]["Tfl-19"][];
    "Mode-modes-RouteGet200TextXmlResponse": components["schemas"]["Tfl-19"][];
    "ids-Status-startDate-To-endDate-Get200ApplicationJsonResponse": components["schemas"]["Tfl-19"][];
    "ids-Status-startDate-To-endDate-Get200TextJsonResponse": components["schemas"]["Tfl-19"][];
    "ids-Status-startDate-To-endDate-Get200ApplicationXmlResponse": components["schemas"]["Tfl-19"][];
    "ids-Status-startDate-To-endDate-Get200TextXmlResponse": components["schemas"]["Tfl-19"][];
    "ids-StatusGet200ApplicationJsonResponse": components["schemas"]["Tfl-19"][];
    "ids-StatusGet200TextJsonResponse": components["schemas"]["Tfl-19"][];
    "ids-StatusGet200ApplicationXmlResponse": components["schemas"]["Tfl-19"][];
    "ids-StatusGet200TextXmlResponse": components["schemas"]["Tfl-19"][];
    "Status-severity-Get200ApplicationJsonResponse": components["schemas"]["Tfl-19"][];
    "Status-severity-Get200TextJsonResponse": components["schemas"]["Tfl-19"][];
    "Status-severity-Get200ApplicationXmlResponse": components["schemas"]["Tfl-19"][];
    "Status-severity-Get200TextXmlResponse": components["schemas"]["Tfl-19"][];
    "Mode-modes-StatusGet200ApplicationJsonResponse": components["schemas"]["Tfl-19"][];
    "Mode-modes-StatusGet200TextJsonResponse": components["schemas"]["Tfl-19"][];
    "Mode-modes-StatusGet200ApplicationXmlResponse": components["schemas"]["Tfl-19"][];
    "Mode-modes-StatusGet200TextXmlResponse": components["schemas"]["Tfl-19"][];
    "id-StopPointsGet200ApplicationJsonResponse": components["schemas"]["Tfl-11"][];
    "id-StopPointsGet200TextJsonResponse": components["schemas"]["Tfl-11"][];
    "id-StopPointsGet200ApplicationXmlResponse": components["schemas"]["Tfl-11"][];
    "id-StopPointsGet200TextXmlResponse": components["schemas"]["Tfl-11"][];
    "ids-DisruptionGet200ApplicationJsonResponse": components["schemas"]["Tfl-14"][];
    "ids-DisruptionGet200TextJsonResponse": components["schemas"]["Tfl-14"][];
    "ids-DisruptionGet200ApplicationXmlResponse": components["schemas"]["Tfl-14"][];
    "ids-DisruptionGet200TextXmlResponse": components["schemas"]["Tfl-14"][];
    "Mode-modes-DisruptionGet200ApplicationJsonResponse": components["schemas"]["Tfl-14"][];
    "Mode-modes-DisruptionGet200TextJsonResponse": components["schemas"]["Tfl-14"][];
    "Mode-modes-DisruptionGet200ApplicationXmlResponse": components["schemas"]["Tfl-14"][];
    "Mode-modes-DisruptionGet200TextXmlResponse": components["schemas"]["Tfl-14"][];
    "ids-Arrivals-stopPointId-Get200ApplicationJsonResponse": components["schemas"]["Tfl-41"][];
    "ids-Arrivals-stopPointId-Get200TextJsonResponse": components["schemas"]["Tfl-41"][];
    "ids-Arrivals-stopPointId-Get200ApplicationXmlResponse": components["schemas"]["Tfl-41"][];
    "ids-Arrivals-stopPointId-Get200TextXmlResponse": components["schemas"]["Tfl-41"][];
    "ids-ArrivalsGet200ApplicationJsonResponse": components["schemas"]["Tfl-41"][];
    "ids-ArrivalsGet200TextJsonResponse": components["schemas"]["Tfl-41"][];
    "ids-ArrivalsGet200ApplicationXmlResponse": components["schemas"]["Tfl-41"][];
    "ids-ArrivalsGet200TextXmlResponse": components["schemas"]["Tfl-41"][];
  };
}

export interface operations {
  /** Gets a list of valid modes */
  Line_MetaModes: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["MetaModesGet200ApplicationJsonResponse"];
          "text/json": components["schemas"]["MetaModesGet200TextJsonResponse"];
          "application/xml": components["schemas"]["MetaModesGet200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["MetaModesGet200TextXmlResponse"];
        };
      };
    };
  };
  /** Gets a list of valid severity codes */
  Line_MetaSeverity: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["MetaSeverityGet200ApplicationJsonResponse"];
          "text/json": components["schemas"]["MetaSeverityGet200TextJsonResponse"];
          "application/xml": components["schemas"]["MetaSeverityGet200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["MetaSeverityGet200TextXmlResponse"];
        };
      };
    };
  };
  /** Gets a list of valid disruption categories */
  Line_MetaDisruptionCategories: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["MetaDisruptionCategoriesGet200ApplicationJsonResponse"];
          "text/json": components["schemas"]["MetaDisruptionCategoriesGet200TextJsonResponse"];
          "application/xml": components["schemas"]["MetaDisruptionCategoriesGet200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["MetaDisruptionCategoriesGet200TextXmlResponse"];
        };
      };
    };
  };
  /** Gets a list of valid ServiceTypes to filter on */
  Line_MetaServiceTypes: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["MetaServiceTypesGet200ApplicationJsonResponse"];
          "text/json": components["schemas"]["MetaServiceTypesGet200TextJsonResponse"];
          "application/xml": components["schemas"]["MetaServiceTypesGet200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["MetaServiceTypesGet200TextXmlResponse"];
        };
      };
    };
  };
  /** Gets lines that match the specified line ids. */
  Line_GetByPathIds: {
    parameters: {
      path: {
        /** A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. */
        ids: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ids-Get200ApplicationJsonResponse"];
          "text/json": components["schemas"]["ids-Get200TextJsonResponse"];
          "application/xml": components["schemas"]["ids-Get200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["ids-Get200TextXmlResponse"];
        };
      };
    };
  };
  /** Gets lines that serve the given modes. */
  Line_GetByModeByPathModes: {
    parameters: {
      path: {
        /** A comma-separated list of modes e.g. tube,dlr */
        modes: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Mode-modes-Get200ApplicationJsonResponse"];
          "text/json": components["schemas"]["Mode-modes-Get200TextJsonResponse"];
          "application/xml": components["schemas"]["Mode-modes-Get200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["Mode-modes-Get200TextXmlResponse"];
        };
      };
    };
  };
  /** Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route. */
  Line_RouteByQueryServiceTypes: {
    parameters: {
      query: {
        /** A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified */
        serviceTypes?: "Regular" | "Night";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["RouteGet200ApplicationJsonResponse"];
          "text/json": components["schemas"]["RouteGet200TextJsonResponse"];
          "application/xml": components["schemas"]["RouteGet200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["RouteGet200TextXmlResponse"];
        };
      };
    };
  };
  /** Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route. */
  Line_LineRoutesByIdsByPathIdsQueryServiceTypes: {
    parameters: {
      path: {
        /** A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. */
        ids: string;
      };
      query: {
        /** A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified */
        serviceTypes?: "Regular" | "Night";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ids-RouteGet200ApplicationJsonResponse"];
          "text/json": components["schemas"]["ids-RouteGet200TextJsonResponse"];
          "application/xml": components["schemas"]["ids-RouteGet200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["ids-RouteGet200TextXmlResponse"];
        };
      };
    };
  };
  /** Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route */
  Line_RouteByModeByPathModesQueryServiceTypes: {
    parameters: {
      path: {
        /** A comma-separated list of modes e.g. tube,dlr */
        modes: string;
      };
      query: {
        /** A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified */
        serviceTypes?: "Regular" | "Night";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Mode-modes-RouteGet200ApplicationJsonResponse"];
          "text/json": components["schemas"]["Mode-modes-RouteGet200TextJsonResponse"];
          "application/xml": components["schemas"]["Mode-modes-RouteGet200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["Mode-modes-RouteGet200TextXmlResponse"];
        };
      };
    };
  };
  /** Gets all valid routes for given line id, including the sequence of stops on each route. */
  Line_RouteSequenceByPathIdPathDirectionQueryServiceTypesQueryExcludeCrowding: {
    parameters: {
      path: {
        /** A single line id e.g. victoria */
        id: string;
        /** The direction of travel. Can be inbound or outbound. */
        direction: "inbound" | "outbound" | "all";
      };
      query: {
        /** A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified */
        serviceTypes?: "Regular" | "Night";
        /** That excludes crowding from line disruptions. Can be true or false. */
        excludeCrowding?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-23"];
          "text/json": components["schemas"]["Tfl-23"];
          "application/xml": components["schemas"]["Tfl-23"];
          "text/xml": components["schemas"]["Tfl-23"];
        };
      };
    };
  };
  /** Gets the line status for given line ids during the provided dates e.g Minor Delays */
  Line_StatusByPathIdsPathStartDatePathEndDateQueryDetail: {
    parameters: {
      path: {
        /** A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. */
        ids: string;
        /** Format - date-time (as date-time in RFC3339). Start date for start of the period */
        startDate: string;
        /** Format - date-time (as date-time in RFC3339). End date for the period that the disruption will fall within to be included in the results */
        endDate: string;
      };
      query: {
        /** Include details of the disruptions that are causing the line status including the affected stops and routes */
        detail?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ids-Status-startDate-To-endDate-Get200ApplicationJsonResponse"];
          "text/json": components["schemas"]["ids-Status-startDate-To-endDate-Get200TextJsonResponse"];
          "application/xml": components["schemas"]["ids-Status-startDate-To-endDate-Get200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["ids-Status-startDate-To-endDate-Get200TextXmlResponse"];
        };
      };
    };
  };
  /** Gets the line status of for given line ids e.g Minor Delays */
  Line_StatusByIdsByPathIdsQueryDetail: {
    parameters: {
      path: {
        /** A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. */
        ids: string;
      };
      query: {
        /** Include details of the disruptions that are causing the line status including the affected stops and routes */
        detail?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ids-StatusGet200ApplicationJsonResponse"];
          "text/json": components["schemas"]["ids-StatusGet200TextJsonResponse"];
          "application/xml": components["schemas"]["ids-StatusGet200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["ids-StatusGet200TextXmlResponse"];
        };
      };
    };
  };
  /** Search for lines or routes matching the query string */
  Line_SearchByPathQueryQueryModesQueryServiceTypes: {
    parameters: {
      path: {
        /** Search term e.g victoria */
        query: string;
      };
      query: {
        /** Optionally filter by the specified modes */
        modes?: unknown[];
        /** A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified */
        serviceTypes?: "Regular" | "Night";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-27"];
          "text/json": components["schemas"]["Tfl-27"];
          "application/xml": components["schemas"]["Tfl-27"];
          "text/xml": components["schemas"]["Tfl-27"];
        };
      };
    };
  };
  /** Gets the line status for all lines with a given severity A list of valid severity codes can be obtained from a call to Line/Meta/Severity */
  Line_StatusBySeverityByPathSeverity: {
    parameters: {
      path: {
        /** Format - int32. The level of severity (eg: a number from 0 to 14) */
        severity: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Status-severity-Get200ApplicationJsonResponse"];
          "text/json": components["schemas"]["Status-severity-Get200TextJsonResponse"];
          "application/xml": components["schemas"]["Status-severity-Get200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["Status-severity-Get200TextXmlResponse"];
        };
      };
    };
  };
  /** Gets the line status of for all lines for the given modes */
  Line_StatusByModeByPathModesQueryDetailQuerySeverityLevel: {
    parameters: {
      path: {
        /** A comma-separated list of modes to filter by. e.g. tube,dlr */
        modes: string;
      };
      query: {
        /** Include details of the disruptions that are causing the line status including the affected stops and routes */
        detail?: boolean;
        /** If specified, ensures that only those line status(es) are returned within the lines that have disruptions with the matching severity level. */
        severityLevel?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Mode-modes-StatusGet200ApplicationJsonResponse"];
          "text/json": components["schemas"]["Mode-modes-StatusGet200TextJsonResponse"];
          "application/xml": components["schemas"]["Mode-modes-StatusGet200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["Mode-modes-StatusGet200TextXmlResponse"];
        };
      };
    };
  };
  /** Gets a list of the stations that serve the given line id */
  Line_StopPointsByPathIdQueryTflOperatedNationalRailStationsOnly: {
    parameters: {
      path: {
        /** A single line id e.g. victoria */
        id: string;
      };
      query: {
        /** If the national-rail line is requested, this flag will filter the national rail stations so that only those operated by TfL are returned */
        tflOperatedNationalRailStationsOnly?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["id-StopPointsGet200ApplicationJsonResponse"];
          "text/json": components["schemas"]["id-StopPointsGet200TextJsonResponse"];
          "application/xml": components["schemas"]["id-StopPointsGet200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["id-StopPointsGet200TextXmlResponse"];
        };
      };
    };
  };
  /** Gets the timetable for a specified station on the give line */
  Line_TimetableByPathFromStopPointIdPathId: {
    parameters: {
      path: {
        /** The originating station's stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) */
        fromStopPointId: string;
        /** A single line id e.g. victoria */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-39"];
          "text/json": components["schemas"]["Tfl-39"];
          "application/xml": components["schemas"]["Tfl-39"];
          "text/xml": components["schemas"]["Tfl-39"];
        };
      };
    };
  };
  /** Gets the timetable for a specified station on the give line with specified destination */
  Line_TimetableToByPathFromStopPointIdPathIdPathToStopPointId: {
    parameters: {
      path: {
        /** The originating station's stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) */
        fromStopPointId: string;
        /** A single line id e.g. victoria */
        id: string;
        /** The destination stations's Naptan code */
        toStopPointId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-39"];
          "text/json": components["schemas"]["Tfl-39"];
          "application/xml": components["schemas"]["Tfl-39"];
          "text/xml": components["schemas"]["Tfl-39"];
        };
      };
    };
  };
  /** Get disruptions for the given line ids */
  Line_DisruptionByPathIds: {
    parameters: {
      path: {
        /** A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. */
        ids: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ids-DisruptionGet200ApplicationJsonResponse"];
          "text/json": components["schemas"]["ids-DisruptionGet200TextJsonResponse"];
          "application/xml": components["schemas"]["ids-DisruptionGet200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["ids-DisruptionGet200TextXmlResponse"];
        };
      };
    };
  };
  /** Get disruptions for all lines of the given modes. */
  Line_DisruptionByModeByPathModes: {
    parameters: {
      path: {
        /** A comma-separated list of modes e.g. tube,dlr */
        modes: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Mode-modes-DisruptionGet200ApplicationJsonResponse"];
          "text/json": components["schemas"]["Mode-modes-DisruptionGet200TextJsonResponse"];
          "application/xml": components["schemas"]["Mode-modes-DisruptionGet200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["Mode-modes-DisruptionGet200TextXmlResponse"];
        };
      };
    };
  };
  /** Get the list of arrival predictions for given line ids based at the given stop */
  Line_ArrivalsWithStopPointByPathIdsPathStopPointIdQueryDirectionQueryDestina: {
    parameters: {
      path: {
        /** A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. */
        ids: string;
        /** Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) */
        stopPointId: string;
      };
      query: {
        /** Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all */
        direction?: "inbound" | "outbound" | "all";
        /** Optional. Id of destination stop */
        destinationStationId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ids-Arrivals-stopPointId-Get200ApplicationJsonResponse"];
          "text/json": components["schemas"]["ids-Arrivals-stopPointId-Get200TextJsonResponse"];
          "application/xml": components["schemas"]["ids-Arrivals-stopPointId-Get200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["ids-Arrivals-stopPointId-Get200TextXmlResponse"];
        };
      };
    };
  };
  /** Get the list of arrival predictions for given line ids based at the given stop */
  Line_ArrivalsByPathIds: {
    parameters: {
      path: {
        /** A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. */
        ids: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ids-ArrivalsGet200ApplicationJsonResponse"];
          "text/json": components["schemas"]["ids-ArrivalsGet200TextJsonResponse"];
          "application/xml": components["schemas"]["ids-ArrivalsGet200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["ids-ArrivalsGet200TextXmlResponse"];
        };
      };
    };
  };
  /** Forwards any remaining requests to the back-end */
  Forward_Proxy: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Get200ApplicationJsonResponse"];
        };
      };
    };
  };
}

export interface external {}
