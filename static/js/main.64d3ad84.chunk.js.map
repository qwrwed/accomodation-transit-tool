{"version":3,"sources":["pantonePalette.ts","utils.js","../../tfl-api-wrapper/lib/enums/trackerNet/lines.ts","constants.ts","tfl_roundel_no_text.svg","../../tfl-api-wrapper/lib/tfl.ts","../../tfl-api-wrapper/lib/line.ts","../../tfl-api-wrapper/lib/stopPoint.ts","../../tfl-api-wrapper/lib/enums/trackerNet/stations.ts","../../tfl-api-wrapper/lib/enums/modes.ts","api.ts","properties.jsx","components/Map/Map.jsx","components/Graphs.tsx","components/CheckBoxTreeView.tsx","components/ModeCheckList.tsx","components/App/App.tsx","theme.ts","reportWebVitals.js","index.jsx"],"names":["pantone","require","pantonePalette","forEach","name","r","g","b","Color","rgb","map","ch","hex","deg2rad","deg","Math","PI","obj","fn","TrackerNetLines","getDistanceFromLatLonInKm","loc1","loc2","lat1","lon1","lat2","lon2","dLat","dLon","a","sin","cos","atan2","sqrt","getUniqueListBy","arr","key","Map","item","values","mapArrayOfKeysToObject","Object","fromEntries","k","objectMap","entries","i","v","setUnion","Set","roundAccurately","number","decimalPlaces","Number","round","setNestedObject","base","names","value","split","lastName","arguments","length","pop","catchHttpError","alert","response","data","status","MODES_INFO_ALL","bus","label","color","selectedByDefault","icon","hidden","coach","dlr","overground","tflrail","tram","tube","MODES_INFO","filter","MODES_DEFAULT","LONDON_UNDERGROUND_LINE_COLORS","bakerloo","central","circle","piccadilly","district","victoria","jubilee","metropolitan","northern","Black","LINE_COLORS","c2c","merseyrail","scotrail","southeastern","southern","thameslink","TFL_API_URL_ROOT","NAPTAN_STOPTYPES","TfLAPI","appKey","host","port","this","uri","params","method","FullURL","keys","undefined","qs","axios","get","headers","Accept","fetch","reTag","xmlData","retag","trackerNetRetag","jsonObj","xmlparser","attributeNamePrefix","ignoreAttributes","join","oldDate","toISOString","incidentsOnly","Line","config","sendRequest","line","modes","arrayToCSV","lines","detail","startDate","endDate","convertDate","severityLevel","from","to","NaPTANID","direction","ids","NaptanID","destinationStationId","serviceTypes","StopPoint","includeCrowdingData","types","id","lineIds","getFamily","includeRouteBlockedStops","flattenResponse","lineID","stopTypes","radius","useStopPointHierarchy","categories","returnLines","latitude","longitude","lat","lon","smsID","output","TrackerNetStations","getLatLonFromPostCode","postcode","postcodes","lookup","res","result","getPostCodeFromLatLon","latLon","geo","limit","stopPointInstance","StopPointFunctions","process","lineInstance","LineFunctions","getModes","getLinesByModes","modeNames","getAllByModes","getlineModeDictionary","lineModeDictionary","modeName","modeId","lineId","lineName","console","warn","makeTFLGetRequest","route","otherParams","app_key","paramsString","URLSearchParams","toString","ok","json","exceptionType","httpStatusCode","httpStatus","message","error","getStopPointsByRadius","latLong","getInRadius","stopPoints","getRoutesOnLine","routeSequence","lineStrings","lineString","JSON","parse","filterStopPoints","chosenModesSet","topLevelKey","origin","Array","x","has","size","Promise","all","stopPoint","getByIDs","distance","outcodeData","MAX_PRICE","getOnthemarketLink","toLowerCase","replace","getOpenrentLink","RADIUS_MILES","getZooplaLink","getRightmoveLink","codedOutcode","outcode","jsonInfo","find","code","PropertyLink","children","href","target","rel","OnthemarketLink","OpenrentLink","RightmoveLink","ZooplaLink","originMarker","L","ExtraMarkers","markerColor","shape","prefix","SetView","useMap","setView","getZoom","animate","formatLineModes","lineModes","s","mode","MapOriginMarkers","originInfo","Marker","position","Popup","stringify","Circle","center","MapLines","mapLineSegments","seg","segmentWidth","Fragment","j","Polyline","positions","lineCoords","offset","lineWeight","weight","MapStation","station","useState","setPostcode","useEffect","_postcode","coords","CircleMarker","fillColor","fillOpacity","opacity","eventHandlers","click","style","whiteSpace","zone","MapStations","stations","graphSerialized","nearbyStopPoints","setMapLineSegments","setStations","_displayedGraph","Graph","multi","import","_mapLineSegments","forEachEdge","edge","fromNode","toNode","fromTo","sort","getNodeAttributes","fromLat","fromLon","toLat","toLon","push","lmd","_stations","forEachNode","attributes","rest","info","MapContainer","zoom","scrollWheelZoom","TileLayer","attribution","url","mergeGraph","inputGraph","outputGraph","setAttributes","node","setName","currentAttribute","hasNode","getNodeAttribute","incomingAttribute","newAttribute","mergeNode","mergeEdgeWithKey","mergeGraphObject","graphObject","isMulti","some","graph","getLineGraphFromLine","branchDataKey","lineGraph","stopPointSequences","toast","lineColor","stopPointSequence","stopPointArray","spFrom","spTo","y","type","makeLineGraphUndirected","edgeJson","getLineGraphObjectFromLineIdList","lineIdList","directionList","reverseGraph","lineGraphObject","reverse","getAllChild","childNode","collectedNodes","isArray","goThroughAllNodes","nodes","splice","getNodeById","parentsPath","getChildById","path","childNodesToToggle","stateGetter","stateSetter","defaultExpanded","selectedSet","React","useMemo","parentMap","TreeView","defaultExpandIcon","defaultCollapseIcon","textAlign","renderTree","allSelectedChildren","every","childNodeId","checked","indeterminate","TreeItem","nodeId","FormControlLabel","control","Checkbox","onChange","event","array","includes","indexOf","getOnChange","currentTarget","onClick","e","stopPropagation","ModeCheckList","setData","modeLineTree","isScheduledService","isFarePaying","isTflService","chosenByDefault","child","grandchildren","CheckBoxTreeView","mergeStopPoint","App","setInfo","isBusy","setBusy","setDisplayedGraph","setOriginInfo","setNearbyStopPoints","setGraphSerialized","getModeCheckList","setModeCheckList","formData","setFormData","urlParams","window","location","search","handleFormChange","handleButtonClick","preventDefault","form","FormData","queryString","history","pushState","toastId","_info","loading","success","summary","commonName","summaryText","nearbyLineIdList","nearbyStopPointsOnLines","lineModeGroups","lineIdentifier","directions","finalGraphOutward","finalGraphDirections","lineGraphObjectInDirection","stopPointsReachableFromNearbyStopPointsOnLineGraph","graphDirectionLine","stationNaptan","dfsFromNode","attr","sub","subgraph","finalGraphMerged","copy","export","handleKeyDown","element","elements","localName","focus","blur","Container","maxWidth","className","Paper","src","logo","alt","Typography","variant","component","gutterBottom","elevation","onSubmit","sx","m","width","TextField","defaultValue","onBlur","onKeyDown","onlyInts","setRadius","InputProps","endAdornment","InputAdornment","Button","disabled","theme","createTheme","palette","primary","main","light","dark","secondary","red","A400","background","default","components","MuiPaper","styleOverrides","root","padding","margin","MuiButton","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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,E,aAAAA,E,kBAAAA,E,mBAAAA,E,gBAAAA,E,eAAAA,E,iBAAAA,E,kBAAAA,E,gBAAAA,E,qBAAAA,E,mBAAAA,E,oBAAAA,E,aAAAA,E,iBAAAA,E,oBAAAA,E,kBAAAA,E,kBAAAA,E,sBAAAA,E,oBAAAA,E,cAAAA,E,qBAAAA,E,iBAAAA,E,wBAAAA,E,gBAAAA,E,iBAAAA,E,cAAAA,E,kBAAAA,E,eAAAA,E,YAAAA,E,cAAAA,E,cAAAA,E,aAAAA,E,eAAAA,E,mBAAAA,E,kBAAAA,E,kBAAAA,E,iBAAAA,E,gBAAAA,E,iBAAAA,E,kBAAAA,E,oBAAAA,E,qBAAAA,E,cAAAA,E,kBAAAA,E,mBAAAA,E,WAAAA,E,cAAAA,E,kBAAAA,E,kBAAAA,E,cAAAA,E,kBAAAA,E,iBAAAA,E,eAAAA,E,cAAAA,E,kBAAAA,E,gBAAAA,E,eAAAA,E,mBAAAA,E,mBAAAA,E,mBAAAA,E,kBAAAA,E,gBAAAA,E,mBAAAA,E,oBAAAA,E,iBAAAA,E,mBAAAA,E,mBAAAA,E,qBAAAA,E,mBAAAA,E,iBAAAA,E,kBAAAA,E,kBAAAA,E,mBAAAA,E,aAAAA,E,mBAAAA,E,uBAAAA,E,iBAAAA,E,gBAAAA,E,qBAAAA,E,mBAAAA,E,iBAAAA,E,cAAAA,E,mBAAAA,E,eAAAA,E,wBAAAA,E,iBAAAA,E,cAAAA,E,aAAAA,E,iBAAAA,E,oBAAAA,E,mBAAAA,E,eAAAA,E,aAAAA,E,iBAAAA,E,qBAAAA,E,cAAAA,E,mBAAAA,E,mBAAAA,E,sBAAAA,E,gBAAAA,E,mBAAAA,E,gBAAAA,E,gBAAAA,E,0BAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,kBAAAA,E,eAAAA,E,iBAAAA,E,2BAAAA,E,iBAAAA,E,iBAAAA,E,eAAAA,E,iBAAAA,E,iCAAAA,E,gBAAAA,E,kBAAAA,E,sBAAAA,E,oBAAAA,E,mBAAAA,E,mBAAAA,E,cAAAA,E,qBAAAA,E,kBAAAA,E,2BAAAA,E,mBAAAA,E,wBAAAA,E,2BAAAA,E,wBAAAA,E,kBAAAA,E,eAAAA,E,gBAAAA,E,iBAAAA,E,iBAAAA,E,cAAAA,E,oBAAAA,E,kBAAAA,E,0BAAAA,E,oBAAAA,E,aAAAA,E,mBAAAA,E,sBAAAA,E,sBAAAA,E,eAAAA,E,kBAAAA,E,mBAAAA,E,iBAAAA,E,yBAAAA,E,eAAAA,E,mBAAAA,E,cAAAA,E,iBAAAA,E,eAAAA,E,aAAAA,E,iBAAAA,E,cAAAA,E,kBAAAA,E,kBAAAA,E,kBAAAA,E,qBAAAA,E,sBAAAA,E,eAAAA,E,cAAAA,E,gBAAAA,E,wBAAAA,E,cAAAA,E,eAAAA,E,WAAAA,E,mBAAAA,E,iBAAAA,E,eAAAA,E,mBAAAA,E,uBAAAA,E,cAAAA,E,eAAAA,E,gBAAAA,E,mBAAAA,E,iBAAAA,E,gBAAAA,E,sBAAAA,E,gBAAAA,E,kBAAAA,E,eAAAA,E,mBAAAA,E,oBAAAA,E,qBAAAA,E,cAAAA,E,mBAAAA,E,oBAAAA,E,kBAAAA,E,gBAAAA,E,kBAAAA,E,gBAAAA,E,kBAAAA,E,kBAAAA,E,kBAAAA,E,kBAAAA,E,sBAAAA,E,kBAAAA,E,mBAAAA,E,mBAAAA,E,eAAAA,E,oBAAAA,E,mBAAAA,E,gBAAAA,E,kBAAAA,E,cAAAA,E,mBAAAA,E,mBAAAA,E,oBAAAA,E,gBAAAA,E,qBAAAA,E,iBAAAA,E,sBAAAA,E,yBAAAA,E,aAAAA,E,mBAAAA,E,kBAAAA,E,gBAAAA,E,6BAAAA,E,kBAAAA,E,mBAAAA,E,oBAAAA,E,sBAAAA,E,gBAAAA,E,gBAAAA,E,YAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,gBAAAA,E,yBAAAA,E,eAAAA,E,mBAAAA,E,kBAAAA,E,gBAAAA,E,gBAAAA,E,eAAAA,E,mBAAAA,E,gBAAAA,E,oBAAAA,E,cAAAA,E,qBAAAA,E,qBAAAA,E,eAAAA,E,oBAAAA,E,kBAAAA,E,kBAAAA,E,kBAAAA,E,mBAAAA,E,oBAAAA,Q,KAuQIA,ICvQJpC,kB,eAAAA,G,qBAAAA,G,cAAAA,G,uBAAAA,G,UAAAA,G,kDAAAA,G,uCAAAA,G,6BAAAA,G,wBAAAA,G,iCAAAA,G,qBAAAA,G,uBAAAA,G,YAAAA,G,kBAAAA,G,YAAAA,G,YAAAA,G,kBAoBIA,I,oBCIFqC,GAAqB,uCAAG,WACnCC,GADm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","file":"static/js/main.64d3ad84.chunk.js","sourcesContent":["import Color from \"color\";\r\n\r\nconst pantone = require(\"./@PANTONE.palette.json\");\r\n\r\ntype PantonePaletteColor = {\r\n  name: string;\r\n  r: number;\r\n  g: number;\r\n  b: number;\r\n};\r\n\r\nconst pantonePalette: Record<string, string> = {};\r\npantone.forEach(({ name, r, g, b }: PantonePaletteColor) => {\r\n  pantonePalette[name] = Color.rgb([r, g, b].map((ch) => ch * 255)).hex();\r\n});\r\n\r\nexport default pantonePalette;\r\n","/* eslint-disable */\r\n\r\n// remove pairs where value is false, then extract only keys to list\r\nexport const objectKeysToList = (obj) =>\r\n  Object.entries(obj)\r\n    .filter(([key, value]) => value)\r\n    .map(([key, value]) => key);\r\n// .join();\r\n\r\nfunction deg2rad(deg) {\r\n  return deg * (Math.PI / 180);\r\n}\r\n\r\nexport const getDistanceFromLatLonInKm = (loc1, loc2) => {\r\n  const [lat1, lon1] = loc1;\r\n  const [lat2, lon2] = loc2;\r\n  // https://stackoverflow.com/q/18883601\r\n  const R = 6371; // Radius of the earth in km\r\n  const dLat = deg2rad(lat2 - lat1);\r\n  const dLon = deg2rad(lon2 - lon1);\r\n  const a =\r\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.cos(deg2rad(lat1)) *\r\n    Math.cos(deg2rad(lat2)) *\r\n    Math.sin(dLon / 2) *\r\n    Math.sin(dLon / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  const d = R * c; // Distance in km\r\n  return d;\r\n};\r\n\r\nexport const getUniqueListBy = (arr, key) => \r\n  // https://stackoverflow.com/a/56768137\r\n   [...new Map(arr.map((item) => [item[key], item])).values()]\r\n;\r\n\r\nexport const kvArrayToObject = (arr) => arr.reduce((result, item) => {\r\n    const key = Object.keys(item)[0]; // first property: a, b, c\r\n    result[key] = item[key];\r\n    return result;\r\n  }, {});\r\n\r\nexport const mapArrayOfKeysToObject = (arr, fn) => Object.fromEntries(arr.map(k => [k, fn(k)]))\r\n\r\nexport const objectMap = (obj, fn) =>\r\n  // https://stackoverflow.com/a/14810722\r\n  Object.fromEntries(\r\n    Object.entries(obj).map(\r\n      ([k, v], i) => [k, fn(v, k, i)]\r\n    )\r\n  )\r\n\r\nexport const objectFilter = (obj, fn) =>\r\n  Object.fromEntries(\r\n    Object.entries(obj).filter(\r\n      ([k, v], i) => fn(v, k, i)\r\n    )\r\n  );\r\n\r\nexport let getDescendants = (obj, key, currentDescendantIds = new Set(), level = 0) => {\r\n  // console.log(`getDescendants(L${level}: ${obj}, ${key}, ${JSON.stringify(currentDescendantIds)})`)\r\n  // console.log(descendantIds)\r\n  for (const id of currentDescendantIds) {\r\n    let newDescendantIds = new Set(obj[id][key].map(id => id.toString()))\r\n    newDescendantIds = setDifference(newDescendantIds, currentDescendantIds)\r\n    if (newDescendantIds.length > 0) {\r\n      const res = getDescendants(obj, key, newDescendantIds, level + 1)\r\n      currentDescendantIds = new Set([...currentDescendantIds, ...res].map(id => id.toString()))\r\n    }\r\n  }\r\n  return currentDescendantIds\r\n}\r\n\r\nexport const setDifference = (a, b) =>\r\n  new Set(\r\n    Array.from(a).filter(x => !b.has(x))\r\n  );\r\n\r\nexport const setIntersection = (a, b) => new Set(\r\n  Array.from(a).filter(x => b.has(x))\r\n);\r\n\r\nexport const setUnion = (a, b) => new Set([...a, ...b]);\r\n\r\nexport const roundAccurately = (number, decimalPlaces = 1) => Number(`${Math.round(`${number  }e${  decimalPlaces}`)  }e-${  decimalPlaces}`)\r\n// https://gist.github.com/djD-REK/068cba3d430cf7abfddfd32a5d7903c3\r\n\r\n\r\n/**\r\n * Function: createNestedObject( base, names[, value] )\r\n * @param {*} base The object on which to create the hierarchy.\r\n * @param {*} names An array of strings (or dot-separated string) contaning the names of the objects\r\n * @param {*} value (optional) if given, will be the last object in the hierarchy.\r\n * @returns The last object in the hierarchy.\r\n */\r\n export const setNestedObject = function( base, names, value ) {\r\n  // https://stackoverflow.com/a/11433067\r\n  if (typeof (names) === \"string\")\r\n    names = names.split(\".\")\r\n\r\n  // If a value is given, remove the last name and keep it for later:\r\n  var lastName = arguments.length === 3 ? names.pop() : false;\r\n\r\n  // Walk the hierarchy, creating new objects where needed.\r\n  // If the lastName was removed, then the last object is not set yet:\r\n  for( var i = 0; i < names.length; i++ ) {\r\n      base = base[ names[i] ] = base[ names[i] ] || {};\r\n  }\r\n\r\n  // If a value was given, set it to the last name:\r\n  if( lastName ) base = base[ lastName ] = value;\r\n\r\n  // Return the last object in the hierarchy:\r\n  return base;\r\n};\r\n\r\nexport const catchHttpError = (fn) => {\r\n  return (async function (...args){\r\n    try {\r\n      return await fn(...args);\r\n    } catch (e) {\r\n      alert(`${e.response.data} (Error code ${e.response.status})`);\r\n    }\r\n  })\r\n};\r\n","const enum TrackerNetLines {\r\n    Bakerloo = 'B',\r\n    Central = 'C',\r\n    District = 'D',\r\n    HammersmithCity = 'H',\r\n    Jubilee = 'J',\r\n    Metropolitan = 'M',\r\n    Northern = 'N',\r\n    Piccadilly = 'P',\r\n    Victoria = 'V',\r\n    WaterlooCity = 'W'\r\n}\r\n\r\nexport default TrackerNetLines;\r\n","import pantonePalette from \"./pantonePalette\";\r\nimport { objectFilter, objectMap } from \"./utils\";\r\n\r\ntype ModeInfo = {\r\n  label?: string;\r\n  color?: string;\r\n  selectedByDefault?: boolean;\r\n  icon?: string;\r\n  hidden?: boolean;\r\n};\r\n\r\ntype ModeInfoContainer = {\r\n  [key: string]: ModeInfo;\r\n};\r\n// only scheduled modes\r\nexport const MODES_INFO_ALL: ModeInfoContainer = {\r\n  bus: {\r\n    label: \"London Buses\",\r\n    color: pantonePalette[\"485\"],\r\n    selectedByDefault: false,\r\n    icon: \"fa-bus\",\r\n  },\r\n  \"cable-car\": { hidden: true },\r\n  coach: {\r\n    label: \"Victoria Coach Station\",\r\n    color: pantonePalette[\"130\"],\r\n    hidden: true,\r\n  },\r\n  dlr: {\r\n    label: \"Docklands Light Railway\",\r\n    color: pantonePalette[\"326\"],\r\n    icon: \"fa-subway\",\r\n    selectedByDefault: false,\r\n  },\r\n  \"national-rail\": {\r\n    label: \"National Rail\",\r\n    icon: \"fa-train\",\r\n    selectedByDefault: false,\r\n  },\r\n  overground: {\r\n    label: \"London Overground\",\r\n    color: pantonePalette[\"158\"],\r\n    selectedByDefault: true,\r\n    icon: \"fa-subway\",\r\n  },\r\n  \"replacement-bus\": { hidden: true },\r\n  \"river-bus\": {\r\n    label: \"London River Services\",\r\n    color: pantonePalette[\"299\"],\r\n    hidden: true,\r\n    icon: \"fa-ship\",\r\n  },\r\n  \"river-tour\": { hidden: true },\r\n  tflrail: {\r\n    label: \"TfL Rail\",\r\n    hidden: false,\r\n    icon: \"fa-train\",\r\n    color: pantonePalette[\"266\"],\r\n    selectedByDefault: false,\r\n  },\r\n  \"elizabeth-line\": {\r\n    label: \"Elizabeth Line\",\r\n    hidden: false,\r\n    icon: \"fa-subway\",\r\n    color: pantonePalette[\"266\"],\r\n    selectedByDefault: false,\r\n  },\r\n  tram: {\r\n    label: \"London Tramlink\",\r\n    color: pantonePalette[\"368\"],\r\n    icon: \"fa-subway\",\r\n    selectedByDefault: false,\r\n  },\r\n  tube: {\r\n    label: \"London Underground\",\r\n    color: pantonePalette[\"158\"],\r\n    icon: \"fa-subway\",\r\n    selectedByDefault: true,\r\n  },\r\n};\r\n\r\nexport const MODES_INFO = objectFilter(\r\n  MODES_INFO_ALL,\r\n  ({ hidden }: { hidden: boolean }) => !hidden,\r\n);\r\n\r\nexport const MODES_LABELS = objectMap(\r\n  MODES_INFO,\r\n  ({ label }: { label: string }) => label,\r\n);\r\n\r\nexport const MODES_DEFAULT = objectMap(\r\n  MODES_INFO,\r\n  ({ selectedByDefault }: { selectedByDefault: boolean }) =>\r\n    selectedByDefault || false,\r\n);\r\n\r\nconst LONDON_UNDERGROUND_LINE_COLORS = {\r\n  bakerloo: pantonePalette[\"470\"],\r\n  central: pantonePalette[\"485\"],\r\n  circle: pantonePalette[\"116\"],\r\n  piccadilly: pantonePalette[\"Blue 072\"],\r\n  district: pantonePalette[\"356\"],\r\n  \"waterloo-city\": pantonePalette[\"338\"],\r\n  \"hammersmith-city\": pantonePalette[\"197\"],\r\n  victoria: pantonePalette[\"299\"],\r\n  jubilee: pantonePalette[\"430\"],\r\n  metropolitan: pantonePalette[\"235\"],\r\n  northern: pantonePalette.Black,\r\n};\r\n\r\nconst NATIONAL_RAIL_LINE_COLORS = {\r\n  \"avanti-west-coast\": \"#AAAAAA\",\r\n  c2c: \"#AF8EC7\",\r\n  \"chiltern-railways\": \"#FB369B\",\r\n  \"cross-country\": \"#AAAAAA\",\r\n  \"east-midlands-railway\": \"#31B0CD\",\r\n  \"first-hull-trains\": \"#AAAAAA\",\r\n  \"first-transpennine-express\": \"#AAAAAA\",\r\n  \"gatwick-express\": \"#2C2E35\",\r\n  \"grand-central\": \"#AAAAAA\",\r\n  \"greater-anglia\": \"#7E93A8\",\r\n  \"great-northern\": \"#D49C60\",\r\n  \"great-western-railway\": \"#142A96\",\r\n  \"heathrow-express\": \"#5BCDC2\",\r\n  \"island-line\": \"#AAAAAA\",\r\n  \"london-north-eastern-railway\": \"#88C946\",\r\n  merseyrail: \"#AAAAAA\",\r\n  \"northern-rail\": \"#AAAAAA\",\r\n  scotrail: \"#AAAAAA\",\r\n  southeastern: \"#0174C0\",\r\n  southern: \"#00AB4F\",\r\n  \"south-western-railway\": \"#FF2E17\",\r\n  thameslink: \"#BC2373\",\r\n  \"transport-for-wales\": \"#AAAAAA\",\r\n  \"west-midlands-trains\": \"#AAAAAA\",\r\n};\r\n\r\nexport const LINE_COLORS: Record<string, string> = {\r\n  ...objectMap(MODES_INFO_ALL, ({ color }: { color: string }) => color),\r\n  ...NATIONAL_RAIL_LINE_COLORS,\r\n  ...LONDON_UNDERGROUND_LINE_COLORS,\r\n  // elizabeth: pantonePalette[\"266\"],\r\n  \"london-overground\": MODES_INFO_ALL.overground.color!,\r\n  \"tfl-rail\": MODES_INFO_ALL.tflrail.color!,\r\n};\r\n\r\nexport const TFL_API_URL_ROOT = \"https://api.tfl.gov.uk\";\r\n\r\nexport const NAPTAN_STOPTYPES = [\r\n  \"NaptanMetroStation\",\r\n  \"NaptanRailStation\",\r\n  \"NaptanBusCoachStation\",\r\n  \"NaptanPublicBusCoachTram\",\r\n  \"NaptanFerryPort\",\r\n];\r\n\r\nexport const GRAPH_NODE_SIZE = 2;\r\nexport const GRAPH_NODE_SIZE_POI = 3;\r\n\r\nexport const DEFAULT_RADIUS = 800;\r\n\r\n// export const DEFAULT_POSTCODE = \"SE1 6TG\"; // example location in API docs\r\n// export const DEFAULT_POSTCODE = \"SE1 9SG\"; // london bridge bus station\r\n// export const DEFAULT_POSTCODE = \"SW1A 2JR\"; // westminster tube station\r\n// export const DEFAULT_POSTCODE = \"E14 0AF\"; // poplar DLR station\r\n// export const DEFAULT_POSTCODE = \"E14 8AB\"; // westferry DLR station (has trains from West India Quay, but not to it)\r\n// export const DEFAULT_POSTCODE = \"EC2M 7PY\"; // liverpool street\r\n// export const DEFAULT_POSTCODE = \"CR0 2AF\"; // west croydon (trams)\r\n// export const DEFAULT_POSTCODE = \"W12 8EG\"; // goldhawk road (h&c, circle in parallel)\r\n// export const DEFAULT_POSTCODE = \"N1C 4TB\"; // KGX/STP\r\nexport const DEFAULT_POSTCODE = process.env.REACT_APP_DEFAULT_POSTCODE || \"\";\r\n\r\n// export const EDGE_TYPE = \"line\";\r\nexport const EDGE_TYPE = \"arrow\";\r\n","export default __webpack_public_path__ + \"static/media/tfl_roundel_no_text.7d150cf8.svg\";","import axios from 'axios';\r\nimport * as qs from 'querystring';\r\nimport * as xmlparser from 'fast-xml-parser';\r\n// @ts-ignore\r\nimport { retag } from 'trackernet-xml-retag';\r\n\r\nexport default class TfLAPI {\r\n    public appKey: string;\r\n    private readonly host: string = 'api.tfl.gov.uk';\r\n    private readonly port: number = 443;\r\n\r\n    constructor(appKey: string) {\r\n        this.appKey = appKey;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected async sendRequest(uri: string, params: any, method: string) {\r\n        let FullURL: string = `https://${this.host}:${this.port}${uri}?app_key=${this.appKey}`;\r\n\r\n        // Removed all undefined objects from params\r\n        Object.keys(params).forEach((key) => (params[key] === undefined ? delete params[key] : {}));\r\n\r\n        // If Parameters are passed then stringify them and update the request URL\r\n        if (params) FullURL = `${FullURL}&${qs.stringify(params)}`;\r\n\r\n        const fetch = await axios.get(FullURL, { headers: { Accept: 'application/json', 'cache-control': 'no-cache' } });\r\n        return fetch.data;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected async sendRequestTrackerNet(uri: string, method: string, reTag: boolean) {\r\n        // Fetch data and retag the XML if required\r\n        const fetch = await axios.get(`http://cloud.tfl.gov.uk/TrackerNet${uri}`, { headers: { Accept: 'application/xml', 'cache-control': 'no-cache' } });\r\n        let xmlData = fetch.data;\r\n\r\n        if (reTag) xmlData = retag.trackerNetRetag(xmlData);\r\n\r\n        // Convert XML to JS / JSON\r\n        const jsonObj = xmlparser.parse(xmlData, {\r\n            attributeNamePrefix: '',\r\n            ignoreAttributes: false\r\n        });\r\n\r\n        return jsonObj;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    static objectToQuery(params: any): string {\r\n        return Object.keys(params)\r\n            .map((key) => key + '=' + params[key])\r\n            .join('&');\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    static arrayToCSV(arr: Array<string | number>) {\r\n        return arr.join(',');\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    static convertDate(oldDate: Date | undefined): string {\r\n        return oldDate?.toISOString().split('.')[0] + 'Z';\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    static incidentsCheck(incidentsOnly: boolean): string {\r\n        return incidentsOnly ? '/IncidentsOnly' : '';\r\n    }\r\n}\r\n","import TfL from './interfaces/tfl';\r\nimport TfLAPI from './tfl';\r\n\r\nexport default class Line extends TfLAPI {\r\n    constructor(config: string) {\r\n        super(config);\r\n    }\r\n\r\n    /** Get all valid modes */\r\n    getModes(): Promise<Array<TfL['Mode']>> {\r\n        return this.sendRequest('/Line/Meta/Modes', {}, 'GET');\r\n    }\r\n\r\n    /** Gets a list of all severity codes */\r\n    getSeverityCodes(): Promise<Array<TfL['StatusSeverity']>> {\r\n        return this.sendRequest('/Line/Meta/Severity', {}, 'GET');\r\n    }\r\n\r\n    /** Gets a list of all disruption types */\r\n    getDisruptionCategories(): Promise<Array<TfL['Disruption']['category']>> {\r\n        return this.sendRequest('/Line/Meta/DisruptionCategories', {}, 'GET');\r\n    }\r\n\r\n    /** Gets a list of all service types */\r\n    getServiceTypes(): Promise<Array<'Regular' | 'Night'>> {\r\n        return this.sendRequest('/Line/Meta/ServiceTypes', {}, 'GET');\r\n    }\r\n\r\n    /** Gets a list of the stations that serve the given line id */\r\n    getAllStopPoints(line: string): Promise<Array<TfL['StopPoint']>> {\r\n        return this.sendRequest(`/Line/${line}/StopPoints`, {}, 'GET');\r\n    }\r\n\r\n    /**\r\n     * Gets all lines that serve the given modes\r\n     * @param modes An array of modes e.g. tube, tram\r\n     */\r\n    getAllByModes(modes: Array<string>): Promise<Array<TfL['Line']>> {\r\n        return this.sendRequest(`/Line/Mode/${TfLAPI.arrayToCSV(modes)}`, {}, 'GET');\r\n    }\r\n\r\n    /**\r\n     * Gets the line status of for given line ids e.g Minor Delays\r\n     * @param lines A list of line ids e.g. victoria, circle, N133\r\n     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes\r\n     * @param startDate\r\n     * @param endDate\r\n     */\r\n    getStatusByLine(lines: Array<string>, detail: boolean = false, startDate?: Date, endDate?: Date): Promise<Array<TfL['Line']>> {\r\n        if (!startDate || !endDate) {\r\n            return this.sendRequest(`/Line/${TfLAPI.arrayToCSV(lines)}/Status`, { detail }, 'GET');\r\n        } else {\r\n            return this.sendRequest(`/Line/${TfLAPI.arrayToCSV(lines)}/Status/${TfLAPI.convertDate(startDate)}/to/${TfLAPI.convertDate(endDate)}`, { detail }, 'GET');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the line status of for all lines for the given modes\r\n     * @param modes A comma-separated list of modes to filter by. e.g. tube,dlr\r\n     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes\r\n     * @param severityLevel If specified, ensures that only those line status(es) are returned within the lines that have disruptions with the matching severity level\r\n     */\r\n    getStatusByModes(modes: Array<string>, detail?: boolean, severityLevel?: string): Promise<Array<TfL['Line']>> {\r\n        return this.sendRequest(`/Line/Mode/${TfLAPI.arrayToCSV(modes)}/Status`, { detail, severityLevel }, 'GET');\r\n    }\r\n\r\n    /** Gets the timetable for a specified station on the give line with specified destination */\r\n    getTimetableFromTo(line: string, from: string, to: string): Promise<Array<TfL['TimetableResponse']>> {\r\n        return this.sendRequest(`/Line/${line}/Timetable/${from}/to/${to}`, {}, 'GET');\r\n    }\r\n\r\n    /**\r\n     * Gets the inbound timetable for a specified station on the give line\r\n     *\r\n     * @param line Id of the line e.g. 'victoria'\r\n     * @param NaptanID Id of the stop (station naptan code e.g. 940GZZLUASL)\r\n     * @param direction What direction you want the timetable for. Leave blank for outbound or 'inbound'\r\n     */\r\n    getTimetableFromStation(line: string, NaPTANID: string, direction?: string): Promise<Array<TfL['TimetableResponse']>> {\r\n        return this.sendRequest(`/Line/${line}/Timetable/${NaPTANID}`, { direction }, 'GET');\r\n    }\r\n\r\n    /** Get the list of arrival predictions for given line ids based at the given stop\r\n     * @param ids list of line ids e.g. ['victoria','circle','N133']\r\n     * @param NaptanID Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL)\r\n     * @param direction Optional. The direction of travel. Can be inbound or outbound or all. Default: all\r\n     * @param destinationStationId Optional. Id of destination stop\r\n     */\r\n    getArrivalsByNaptan(ids: Array<string>, NaptanID: string, direction: string = 'all', destinationStationId?: string): Promise<Array<TfL['Prediction']>> {\r\n        return this.sendRequest(`/Line/${TfLAPI.arrayToCSV(ids)}/Arrivals/${NaptanID}`, { direction, destinationStationId }, 'GET');\r\n    }\r\n\r\n    /**\r\n     * Get disruptions for the given line ids\r\n     * @param ids list of line ids e.g. ['victoria','circle','N133']\r\n     */\r\n    getDistruptionsByID(ids: Array<string>): Promise<Array<TfL['Disruption']>> {\r\n        return this.sendRequest(`/Line/${TfLAPI.arrayToCSV(ids)}/Disruption`, {}, 'GET');\r\n    }\r\n\r\n    /**\r\n     * Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.\r\n     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified\r\n     */\r\n    getAllValidRoutes(serviceTypes?: string): Promise<Array<TfL['Line']>> {\r\n        return this.sendRequest(`/Line/Route`, { serviceTypes }, 'GET');\r\n    }\r\n}\r\n","import TfLAPI from './tfl';\r\nimport TfL from './interfaces/tfl';\r\n\r\nexport default class StopPoint extends TfLAPI {\r\n    constructor(config: string) {\r\n        super(config);\r\n    }\r\n\r\n    /**\r\n     * Gets the list of available StopPoint additional information categories\r\n     */\r\n    getCategories(): Promise<Array<TfL['StopPointCategory']>> {\r\n        return this.sendRequest(`/StopPoint/Meta/Categories`, {}, 'GET');\r\n    }\r\n    /**\r\n     * Gets the list of available StopPoint types\r\n     */\r\n    getTypes(): Promise<Array<string>> {\r\n        return this.sendRequest(`/StopPoint/Meta/StopTypes`, {}, 'GET');\r\n    }\r\n\r\n    /**\r\n     * Gets the list of available StopPoint modes\r\n     */\r\n    getModes(): Promise<Array<TfL['Mode']>> {\r\n        return this.sendRequest(`/StopPoint/Meta/Modes`, {}, 'GET');\r\n    }\r\n\r\n    /**\r\n     * Gets a list of StopPoints corresponding to the given list of stop ids\r\n     * @param ids A list of stop point ids (station naptan code e.g. 940GZZLUASL).\r\n     * @param includeCrowdingData Include the crowding data (static). To Filter further use: /StopPoint/{ids}/Crowding/{line}\r\n     */\r\n    getByIDs(ids: Array<string>, includeCrowdingData: boolean = false): Promise<Array<TfL['StopPoint']> | TfL['StopPoint']> {\r\n        return this.sendRequest(`/StopPoint/${TfLAPI.arrayToCSV(ids)}`, { includeCrowdingData }, 'GET');\r\n    }\r\n\r\n    /**\r\n     * Gets all stop points of a given type\r\n     * @param types A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint\r\n     */\r\n    getAllByStopType(types: Array<string>): Promise<Array<TfL['StopPoint']>> {\r\n        return this.sendRequest(`/StopPoint/Type/${TfLAPI.arrayToCSV(types)}`, {}, 'GET');\r\n    }\r\n\r\n    /**\r\n     * Gets the service types for a given Stop Point\r\n     * @param id\r\n     * @param lineIds\r\n     * @param modes\r\n     */\r\n    getServiceTypesByID(id: string, lineIds?: Array<string>, modes?: Array<string>): Promise<Array<TfL['LineServiceType']>> {\r\n        return this.sendRequest(`/StopPoint/ServiceTypes`, { id, lineIds, modes }, 'GET');\r\n    }\r\n\r\n    /**\r\n     * Search StopPoints by their common name. Will not return a valid NaPTAN for HUB\r\n     * @param name Name of station\r\n     * @param modes Eg. tfl, dlr\r\n     */\r\n    search(name: string, modes: string): Promise<TfL['SearchResponse']> {\r\n        return this.sendRequest(`/StopPoint/Search/${name}`, { modes }, 'GET');\r\n    }\r\n\r\n    /**\r\n     * Get all service arrivals\r\n     * @param id A StopPoint id (station naptan code e.g. 940GZZLUAS)\r\n     */\r\n    getStationArrivals(id: string): Promise<Array<TfL['Prediction']>> {\r\n        return this.sendRequest(`/StopPoint/${id}/Arrivals`, {}, 'GET');\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param id A StopPoint id (station naptan code e.g. 940GZZLUAS)\r\n     * @param lineIds List of line ids e.g. tfl-rail, london-overground, thameslink\r\n     */\r\n    // getArrivalDepartures(id: string, lineIds: Array<string>) {\r\n    //     return this.sendRequest(`/StopPoint/${id}/ArrivalsDepartures`, { lineIds }, 'GET');\r\n    // }\r\n\r\n    /**\r\n     * Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have\r\n     * @param ids A list of StopPoint ids (station naptan code e.g. 940GZZLUAS)\r\n     * @param getFamily Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false.\r\n     * @param includeRouteBlockedStops\r\n     * @param flattenResponse Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true)\r\n     */\r\n    getDisruptionsByID(ids: Array<string>, getFamily: boolean, includeRouteBlockedStops: boolean, flattenResponse: boolean): Promise<Array<TfL['DisruptedPoint']>> {\r\n        return this.sendRequest(\r\n            `/StopPoint/${TfLAPI.arrayToCSV(ids)}/Disruption`,\r\n            {\r\n                getFamily,\r\n                includeRouteBlockedStops,\r\n                flattenResponse\r\n            },\r\n            'GET'\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets a distinct list of disrupted stop points for the given modes\r\n     * @param modes An array of modes e.g. ['tube', 'dlr']\r\n     * @param includeRouteBlockedStops\r\n     */\r\n    getDisruptionsByMode(modes: Array<string>, includeRouteBlockedStops: boolean): Promise<Array<TfL['DisruptedPoint']>> {\r\n        return this.sendRequest(`/StopPoint/Mode/${TfLAPI.arrayToCSV(modes)}/Disruption`, { includeRouteBlockedStops }, 'GET');\r\n    }\r\n\r\n    /**\r\n     * Gets Stop points that are reachable from a station/line combination\r\n     * @param id A StopPoint id (station naptan code e.g. 940GZZLUAS)\r\n     * @param lineID Line id of the line to filter by (e.g. victoria)\r\n     * @param serviceTypes List of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular'.\r\n     */\r\n    getReachableStationsByID(id: string, lineID: string, serviceTypes: Array<string> = ['Regular']): Promise<Array<TfL['Identifier']>> {\r\n        return this.sendRequest(`/StopPoint/${id}/CanReachOnLine/${lineID}`, { serviceTypes: TfLAPI.arrayToCSV(serviceTypes) }, 'GET');\r\n    }\r\n\r\n    /**\r\n     * Get the route sections for all the lines that service the given stop point id\r\n     * @param id A StopPoint id (station naptan code e.g. 940GZZLUAS)\r\n     * @param serviceTypes List of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular'.\r\n     */\r\n    getRouteSectionByID(id: string, serviceTypes: Array<string> = ['Regular']): Promise<Array<TfL['StopPointRouteSection']>> {\r\n        return this.sendRequest(`/StopPoint/${id}/  `, { serviceTypes: TfLAPI.arrayToCSV(serviceTypes) }, 'GET');\r\n    }\r\n\r\n    /**\r\n     * Gets a list of StopPoints within {radius} by the specified criteria\r\n     * @param stopTypes a list of stopTypes that should be returned.\r\n     * @param radius The radius of the bounding circle in metres (default : 200)\r\n     * @param useStopPointHierarchy Re-arrange the output into a parent/child hierarchy.\r\n     * @param modes The list of modes to search (e.g. tube, dlr)\r\n     * @param categories an optional list of comma separated property categories to return in the StopPoint's property bag. If null or empty, all categories of property are returned. Pass the keyword \"none\" to return no properties.\r\n     * @param returnLines True to return the lines that each stop point serves as a nested resource.\r\n     * @param latitude\r\n     * @param longitude\r\n     */\r\n    getInRadius(\r\n        stopTypes: Array<string>,\r\n        radius: number = 200,\r\n        useStopPointHierarchy: boolean,\r\n        modes: Array<string>,\r\n        categories: Array<string>,\r\n        returnLines: boolean,\r\n        latitude: number,\r\n        longitude: number\r\n    ): Promise<TfL['StopPointsResponse']> {\r\n        return this.sendRequest(\r\n            `/StopPoint`,\r\n            { stopTypes: TfLAPI.arrayToCSV(stopTypes), radius, useStopPointHierarchy, modes: TfLAPI.arrayToCSV(modes), categories: TfLAPI.arrayToCSV(categories), returnLines, lat: latitude, lon: longitude },\r\n            'GET'\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets a StopPoint for a given sms code.\r\n     * @param smsID A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334.\r\n     * @param output If set to \"web\", a 302 redirect to relevant website bus stop page is returned. All other values are ignored.\r\n     */\r\n    getBySMSCode(smsID: number, output?: string): Promise<TfL['StopPoint']> {\r\n        return this.sendRequest(`/StopPoint/Sms/${smsID}`, { output }, 'GET');\r\n    }\r\n\r\n    /**\r\n     * Gets a list of taxi ranks corresponding to the given stop point id\r\n     * @param id A StopPoint id (station naptan code e.g. 940GZZLUAS)\r\n     */\r\n    getTaxiRanksByID(id: string): Promise<Array<TfL['Place']>> {\r\n        return this.sendRequest(`/StopPoint/${id}/TaxiRanks`, {}, 'GET');\r\n    }\r\n\r\n    /**\r\n     * Get car parks corresponding to the given stop point id\r\n     * @param id A StopPoint id (station naptan code e.g. 940GZZLUAS)\r\n     */\r\n    getCarParksByID(id: string): Promise<Array<TfL['Place']>> {\r\n        return this.sendRequest(`/StopPoint/${id}/CarParks`, {}, 'GET');\r\n    }\r\n}\r\n","const enum TrackerNetStations {\r\n    Amersham = 'AME',\r\n    ChalfontandLatimer = 'CLF',\r\n    Croxley = 'CRX',\r\n    Chorleywood = 'CWD',\r\n    EdgwareRoadBakerloo = 'ERB',\r\n    HarrowandWealdstone = 'HAW',\r\n    HarrowontheHill = 'HOH',\r\n    Harlesden = 'HSD',\r\n    KensalGreen = 'KGN',\r\n    Kenton = 'KNT',\r\n    KilburnPark = 'KPK',\r\n    LambethNorth = 'LAM',\r\n    MaidaVale = 'MDV',\r\n    MoorPark = 'MPK',\r\n    Marylebone = 'MYB',\r\n    NorthHarrow = 'NHR',\r\n    Northwood = 'NWD',\r\n    NorthwoodHills = 'NWH',\r\n    NorthWembley = 'NWM',\r\n    NorthwickPark = 'NWP',\r\n    Pinner = 'PIN',\r\n    QueensPark = 'QPK',\r\n    Rickmansworth = 'RKY',\r\n    RegentsPark = 'RPK',\r\n    SouthKenton = 'SKT',\r\n    StonebridgePark = 'SPK',\r\n    WarwickAvenue = 'WAR',\r\n    Watford = 'WAT',\r\n    WembleyCentral = 'WEM',\r\n    WestHarrow = 'WHR',\r\n    WillesdenJunction = 'WJN',\r\n    ActonTown = 'ACT',\r\n    ArnosGrove = 'AGR',\r\n    Aldgate = 'ALD',\r\n    AldgateEast = 'ALE',\r\n    Alperton = 'ALP',\r\n    Angel = 'ANG',\r\n    Archway = 'ARC',\r\n    Arsenal = 'ARL',\r\n    Balham = 'BAL',\r\n    Barbican = 'BAR',\r\n    BromleyByBow = 'BBB',\r\n    BaronsCourt = 'BCT',\r\n    Barkingside = 'BDE',\r\n    BondStreet = 'BDS',\r\n    Becontree = 'BEC',\r\n    Bermondsey = 'BER',\r\n    BoundsGreen = 'BGR',\r\n    BuckhurstHill = 'BHL',\r\n    BlackhorseRoad = 'BHR',\r\n    Barking = 'BKG',\r\n    Blackfriars = 'BLF',\r\n    BethnalGreen = 'BNG',\r\n    Bank = 'BNK',\r\n    Borough = 'BOR',\r\n    BostonManor = 'BOS',\r\n    BelsizePark = 'BPK',\r\n    Brixton = 'BRX',\r\n    BakerStreet = 'BST',\r\n    BrentCross = 'BTX',\r\n    BurntOak = 'BUR',\r\n    BowRoad = 'BWR',\r\n    Cockfosters = 'CFS',\r\n    ChalkFarm = 'CHF',\r\n    Chigwell = 'CHG',\r\n    ChiswickPark = 'CHP',\r\n    CharingCross = 'CHX',\r\n    ColliersWood = 'CLW',\r\n    CanningTown = 'CNT',\r\n    Colindale = 'COL',\r\n    CoventGarden = 'COV',\r\n    ClaphamCommon = 'CPC',\r\n    CanonsPark = 'CPK',\r\n    ClaphamNorth = 'CPN',\r\n    ClaphamSouth = 'CPS',\r\n    CaledonianRoad = 'CRD',\r\n    CannonStreet = 'CST',\r\n    CamdenTown = 'CTN',\r\n    CanaryWharf = 'CWF',\r\n    CanadaWater = 'CWR',\r\n    ChanceryLane = 'CYL',\r\n    Debden = 'DEB',\r\n    DagenhamEast = 'DGE',\r\n    DagenhamHeathway = 'DGH',\r\n    DollisHill = 'DHL',\r\n    EastActon = 'EAC',\r\n    EalingBroadway = 'EBY',\r\n    EalingCommon = 'ECM',\r\n    EarlsCourt = 'ECT',\r\n    Edgware = 'EDG',\r\n    EastFinchley = 'EFY',\r\n    EastHam = 'EHM ',\r\n    ElephantandCastle = 'ELE',\r\n    Embankment = 'EMB',\r\n    ElmPark = 'EPK',\r\n    Epping = 'EPP',\r\n    EastPutney = 'EPY',\r\n    EdgwareRoadHC = 'ERD',\r\n    EustonSquare = 'ESQ',\r\n    Eastcote = 'ETE',\r\n    Euston = 'EUS',\r\n    Farringdon = 'FAR',\r\n    FulhamBroadway = 'FBY',\r\n    Fairlop = 'FLP',\r\n    FinsburyPark = 'FPK',\r\n    FinchleyRoad = 'FRD',\r\n    FinchleyCentral = 'FYC',\r\n    Greenford = 'GFD',\r\n    GoldersGreen = 'GGR',\r\n    GantsHill = 'GHL',\r\n    GreenPark = 'GPK',\r\n    GreatPortlandStreet = 'GPS',\r\n    GloucesterRoad = 'GRD',\r\n    GrangeHill = 'GRH',\r\n    GoodgeStreet = 'GST',\r\n    Gunnersbury = 'GUN',\r\n    Hainault = 'HAI',\r\n    HighBarnet = 'HBT',\r\n    HighburyandIslington = 'HBY',\r\n    Hornchurch = 'HCH',\r\n    Hillingdon = 'HDN',\r\n    Highgate = 'HIG',\r\n    HangerLane = 'HLN',\r\n    HammersmithDistrictAndPicc = 'HMD',\r\n    Hampstead = 'HMP',\r\n    Hammersmith = 'HMS',\r\n    HounslowCentral = 'HNC',\r\n    HendonCentral = 'HND',\r\n    HounslowEast = 'HNE',\r\n    HounslowWest = 'HNW',\r\n    Holborn = 'HOL',\r\n    HydeParkCorner = 'HPC',\r\n    HollandPark = 'HPK',\r\n    HeathrowTerminals123 = 'HRC',\r\n    HollowayRoad = 'HRD',\r\n    HeathrowTerminal5 = 'HRV',\r\n    HighStreetKensington = 'HST',\r\n    HeathrowTerminal4 = 'HTF',\r\n    HattonCross = 'HTX',\r\n    Ickenham = 'ICK',\r\n    Kingsbury = 'KBY',\r\n    Kennington = 'KEN',\r\n    KewGardens = 'KEW',\r\n    Kilburn = 'KIL',\r\n    Knightsbridge = 'KNB',\r\n    KentishTown = 'KTN',\r\n    KingsCrossStPancras = 'KXX',\r\n    LancasterGate = 'LAN',\r\n    Leyton = 'LEY',\r\n    LondonBridge = 'LON',\r\n    LeicesterSquare = 'LSQ',\r\n    LiverpoolStreet = 'LST',\r\n    Loughton = 'LTN',\r\n    Leytonstone = 'LYS',\r\n    MansionHouse = 'MAN',\r\n    MarbleArch = 'MAR',\r\n    MorningtonCrescent = 'MCR',\r\n    Moorgate = 'MGT',\r\n    MillHillEast = 'MHE',\r\n    MileEnd = 'MLE',\r\n    ManorHouse = 'MNR',\r\n    Monument = 'MON',\r\n    Morden = 'MOR',\r\n    NorthActon = 'NAC',\r\n    Neasden = 'NEA',\r\n    NorthEaling = 'NEL',\r\n    NewburyPark = 'NEP',\r\n    Northfields = 'NFD',\r\n    NorthGreenwich = 'NGW',\r\n    NottingHillGate = 'NHG',\r\n    Northolt = 'NHT',\r\n    Oakwood = 'OAK',\r\n    OldStreet = 'OLD',\r\n    KensingtonOlympia = 'OLY',\r\n    Olympia = 'OLY',\r\n    Osterley = 'OST',\r\n    Oval = 'OVL',\r\n    OxfordCircus = 'OXC',\r\n    Paddington = 'PAD',\r\n    Perivale = 'PER',\r\n    ParsonsGreen = 'PGR',\r\n    PiccadillyCircus = 'PIC',\r\n    Pimlico = 'PIM',\r\n    Plaistow = 'PLW',\r\n    ParkRoyal = 'PRY',\r\n    PutneyBridge = 'PUT',\r\n    Queensbury = 'QBY',\r\n    Queensway = 'QWY',\r\n    RavenscourtPark = 'RCP',\r\n    Redbridge = 'RED',\r\n    RaynersLane = 'RLN',\r\n    Richmond = 'RMD',\r\n    RodingValley = 'ROD',\r\n    RussellSquare = 'RSQ',\r\n    RuislipGardens = 'RUG',\r\n    Ruislip = 'RUI',\r\n    RuislipManor = 'RUM',\r\n    ShepherdsBush = 'SBC',\r\n    SouthEaling = 'SEL',\r\n    Stratford = 'SFD',\r\n    Southfields = 'SFS',\r\n    Southgate = 'SGT',\r\n    SudburyHill = 'SHL',\r\n    SouthHarrow = 'SHR',\r\n    StJamesPark = 'SJP',\r\n    StJohnsWood = 'SJW',\r\n    SouthKensington = 'SKN',\r\n    Snaresbrook = 'SNB',\r\n    SouthRuislip = 'SRP',\r\n    SloaneSquare = 'SSQ',\r\n    Stanmore = 'STA',\r\n    StamfordBrook = 'STB',\r\n    StepneyGreen = 'STG',\r\n    Stockwell = 'STK',\r\n    SudburyTown = 'STN',\r\n    StPauls = 'STP',\r\n    SevenSisters = 'SVS',\r\n    SwissCottage = 'SWC',\r\n    SouthWoodford = 'SWF',\r\n    Southwark = 'SWK',\r\n    SouthWimbledon = 'SWM',\r\n    TootingBec = 'TBE',\r\n    TootingBroadway = 'TBY',\r\n    TottenhamCourtRoad = 'TCR',\r\n    Temple = 'TEM',\r\n    TurnhamGreen = 'TGR',\r\n    TheydonBois = 'THB',\r\n    TowerHill = 'THL',\r\n    TotteridgeandWhetstone = 'TOT',\r\n    TufnellPark = 'TPK',\r\n    TurnpikeLane = 'TPL',\r\n    TottenhamHale = 'TTH',\r\n    UpminsterBridge = 'UPB',\r\n    UptonPark = 'UPK',\r\n    Upminster = 'UPM',\r\n    Upney = 'UPY',\r\n    Uxbridge = 'UXB',\r\n    Victoria = 'VIC',\r\n    Vauxhall = 'VUX',\r\n    WestActon = 'WAC',\r\n    WalthamstowCentral = 'WAL',\r\n    Wanstead = 'WAN',\r\n    WestBrompton = 'WBT',\r\n    Whitechapel = 'WCL',\r\n    WhiteCity = 'WCT',\r\n    Wimbledon = 'WDN',\r\n    Woodford = 'WFD',\r\n    WestFinchley = 'WFY',\r\n    WoodGreen = 'WGN',\r\n    WestHampstead = 'WHD',\r\n    WestHam = 'WHM',\r\n    WestKensington = 'WKN',\r\n    WillesdenGreen = 'WLG',\r\n    Waterloo = 'WLO',\r\n    WimbledonPark = 'WMP',\r\n    Westminster = 'WMS',\r\n    WembleyPark = 'WPK',\r\n    WestRuislip = 'WRP',\r\n    WoodsidePark = 'WSP',\r\n    WarrenStreet = 'WST'\r\n}\r\n\r\nexport default TrackerNetStations;\r\n","const enum modes {\r\n    bus = 'bus',\r\n    cablecar = 'cable-car',\r\n    cycle = 'cycle',\r\n    cyclehire = 'cycle-hire',\r\n    dlr = 'dlr',\r\n    interchangekeepsitting = 'interchange-keep-sitting',\r\n    interchangesecure = 'interchange-secure',\r\n    nationalrail = 'national-rail',\r\n    overground = 'overground',\r\n    replacementbus = 'replacement-bus',\r\n    riverbus = 'river-bus',\r\n    rivertour = 'river-tour',\r\n    taxi = 'taxi',\r\n    tflrail = 'tflrail',\r\n    tram = 'tram',\r\n    tube = 'tube',\r\n    walking = 'walking'\r\n}\r\n\r\nexport default modes;\r\n","/* eslint-disable no-param-reassign */\r\n/* eslint-disable */\r\n// @ts-nocheck\r\nimport {\r\n  StopPoint as StopPointFunctions,\r\n  Line as LineFunctions,\r\n} from \"tfl-api-wrapper\";\r\nimport {\r\n  getDistanceFromLatLonInKm,\r\n  getUniqueListBy,\r\n  objectMap,\r\n  roundAccurately,\r\n  setIntersection,\r\n} from \"./utils\";\r\n\r\nimport { MODES_INFO_ALL, TFL_API_URL_ROOT } from \"./constants\";\r\nimport { components as StopPointComponents } from \"./types/StopPoint\";\r\nimport { components as LineComponents } from \"./types/Line\";\r\n\r\nimport postcodes from \"node-postcodes.io\";\r\n\r\ntype StopPoint = StopPointComponents[\"schemas\"][\"Tfl-11\"];\r\ntype Mode = LineComponents[\"schemas\"][\"Tfl\"];\r\n\r\nexport const getLatLonFromPostCode = async (\r\n  postcode: string,\r\n): Promise<LatLon> => {\r\n  let { result: res } = await postcodes.lookup(postcode);\r\n  if (res){\r\n    res = objectMap(res, (v: number) => roundAccurately(v, 3));\r\n    return [res.latitude, res.longitude];\r\n  }\r\n};\r\n\r\nexport const getPostCodeFromLatLon = async(\r\n  latLon: LatLon,\r\n) => {\r\n  let { result: res } = await postcodes.geo(...latLon, {limit: 1000});\r\n  if (res){\r\n    return res[0].postcode;\r\n  }\r\n}\r\n\r\nexport const getTFLApiKey = () => process.env.REACT_APP_TFL_KEY || \"\";\r\nconst stopPointInstance = new StopPointFunctions(getTFLApiKey());\r\nconst lineInstance = new LineFunctions(getTFLApiKey());\r\n\r\nexport const getModes = () => lineInstance.getModes();\r\nexport const getLinesByModes = (modeNames: string[]) =>\r\n  lineInstance.getAllByModes(modeNames);\r\n\r\nexport const getStopPointsInfo = (stopPointIds: string[]) =>\r\n  stopPointInstance.getByIDs(stopPointIds);\r\n\r\nconst getlineModeDictionary = async () => {\r\n  const lineModeDictionary = {};\r\n  const modes = await getModes();\r\n  let modeNames = modes.map(({ modeName }) => modeName);\r\n  // remove elizabeth line result while api does not support it\r\n  modeNames = modeNames.filter((modeName) => modeName !== \"elizabeth-line\");\r\n  const lines = await getLinesByModes(modeNames);\r\n  for (const line of lines) {\r\n    const { modeName: modeId, id: lineId, name: lineName } = line;\r\n    const modeName = MODES_INFO_ALL[modeId].label;\r\n    if (\r\n      lineId in lineModeDictionary &&\r\n      lineModeDictionary[lineId] !== modeId\r\n    ) {\r\n      console.warn(`line ${lineId} already corresponds to mode ${modeId}`);\r\n    } else {\r\n      lineModeDictionary[lineId] = {lineId, lineName, modeId, modeName};\r\n    }\r\n  }\r\n  return lineModeDictionary;\r\n};\r\n\r\nexport const lineModeDictionary = getlineModeDictionary();\r\n\r\nexport const makeTFLGetRequest = async (\r\n  route: string,\r\n  otherParams?: Record<string, any>,\r\n) => {\r\n  const appKey = getTFLApiKey();\r\n  const params = appKey\r\n    ? { app_key: appKey, ...otherParams }\r\n    : { ...otherParams };\r\n  const paramsString = new URLSearchParams(params).toString();\r\n  // console.log(`GET ${TFL_API_URL_ROOT}${route}?${params}`)\r\n  const response = await fetch(`${TFL_API_URL_ROOT}${route}?${paramsString}`);\r\n  if (response.ok) {\r\n    return response.json();\r\n  }\r\n  const { exceptionType, httpStatusCode, httpStatus, message } =\r\n    await response.json();\r\n  console.error(\r\n    `${exceptionType}: ${httpStatusCode} (${httpStatus})\\n${message} (from ${TFL_API_URL_ROOT}${route})`,\r\n  );\r\n  return null;\r\n};\r\n\r\nexport const getStopPointsByRadius = async (\r\n  stopTypes: string[],\r\n  latLong: [number, number],\r\n  radius: number,\r\n) => {\r\n  const [lat, lon] = latLong;\r\n\r\n  const res = await stopPointInstance.getInRadius(\r\n    stopTypes,\r\n    radius,\r\n    false,\r\n    [],\r\n    [],\r\n    true,\r\n    lat,\r\n    lon,\r\n  );\r\n\r\n  //   own implementation\r\n  // const res = await makeTFLGetRequest(\"/StopPoint\", {\r\n  //   stopTypes: stopTypes.join(),\r\n  //   lat,\r\n  //   lon,\r\n  //   radius,\r\n  //   returnLines: true,\r\n  // });\r\n\r\n  if (typeof res !== \"undefined\") return res.stopPoints as StopPoint[];\r\n  return [] as StopPoint[];\r\n};\r\n\r\nexport const getLinesFromModes = async (modesList: string[]) => {\r\n  const modesString = modesList.join(\",\");\r\n  const linesList = await makeTFLGetRequest(`/Line/Mode/${modesString}`);\r\n  return linesList;\r\n};\r\n\r\nexport const getRoutesOnLine = async (lineId: string) => {\r\n  const routeSequence = await makeTFLGetRequest(\r\n    `/Line/${lineId}/Route/Sequence/all`,\r\n  );\r\n  if (routeSequence === null) return null;\r\n  routeSequence.lineStrings = routeSequence.lineStrings.map(\r\n    (lineString: string) => JSON.parse(lineString)[0],\r\n  );\r\n  return routeSequence;\r\n};\r\n\r\nexport const getNaptanTypes = async () =>\r\n  makeTFLGetRequest(\"/StopPoint/Meta/StopTypes\");\r\n\r\nexport const getStoppointDataCategories = async () =>\r\n  makeTFLGetRequest(\"/StopPoint/Meta/categories\");\r\n\r\nexport const getTransportModes = async () => {\r\n  let res = await makeTFLGetRequest(\"/Line/Meta/Modes\");\r\n  res = res.filter((mode: Mode) => mode.isScheduledService);\r\n  res = Object.values(\r\n    objectMap(res, ({ modeName }: { modeName: string }) => modeName),\r\n  );\r\n  return res;\r\n};\r\n\r\nexport const filterStopPoints = async (\r\n  stopPoints: StopPoint[],\r\n  chosenModesSet: Set<string>,\r\n  topLevelKey: KeyOfType<StopPoint, string> | undefined,\r\n  origin: LatLon | undefined,\r\n) => {\r\n  // remove stopPoints with no line data\r\n  stopPoints = stopPoints.filter(\r\n    ({ lines }) => lines?.length && lines.length > 0,\r\n  );\r\n\r\n  // remove stopPoints that don't serve the chosen modes\r\n  if (typeof chosenModesSet !== \"undefined\") {\r\n    stopPoints = stopPoints.filter(\r\n      ({ modes }) => setIntersection(new Set(modes), chosenModesSet).size > 0,\r\n    );\r\n  }\r\n\r\n  // remove duplicate stopPoints\r\n  if (typeof topLevelKey === \"undefined\") {\r\n    return stopPoints;\r\n  }\r\n  // topLevelKey = \"stationNaptan\";\r\n  stopPoints = await Promise.all(\r\n    stopPoints.map(\r\n      async (stopPoint) =>\r\n        // makeTFLGetRequest(`/StopPoint/${stopPoint[topLevelKey]}`),\r\n        (await stopPointInstance.getByIDs([\r\n          stopPoint[topLevelKey],\r\n        ])) as StopPoint,\r\n    ),\r\n  );\r\n  stopPoints = stopPoints.map((stopPoint) => ({\r\n    ...stopPoint,\r\n    distance: !origin\r\n      ? -1 // TODO: check if StopPoint.distance can be undefined\r\n      : getDistanceFromLatLonInKm(origin, [stopPoint.lat, stopPoint.lon]),\r\n  }));\r\n  return getUniqueListBy(stopPoints, topLevelKey);\r\n};\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport React from \"react\";\r\n\r\nconst outcodeData = require(\"./rightmoveOutcodeData.json\"); // https://github.com/ISNIT0/rightmove-outcode-scraper\r\n\r\nconst MIN_BEDROOMS = 0;\r\nconst MAX_BEDROOMS = 2;\r\nconst MIN_PRICE = 0;\r\nconst MAX_PRICE = 1750;\r\nconst RADIUS_MILES = 0.5;\r\n\r\nconst KM_PER_MILE = 1.609;\r\n\r\nconst getOnthemarketLink = ({ postcode }) => {\r\n  if (!postcode) return null;\r\n  // eslint-disable-next-line prettier/prettier\r\n  const url = `https://www.onthemarket.com/to-rent/property/${postcode.toLowerCase().replace(\" \", \"-\")}/?furnished=furnished\r\nmax-bedrooms=${MAX_BEDROOMS}\r\nmax-price=${MAX_PRICE}\r\nmin-bedrooms=${MIN_BEDROOMS}\r\n${MIN_PRICE && `min-price=${MIN_PRICE}`}\r\nradius=${RADIUS_MILES}\r\nview=grid`;\r\n  return url.replace(/(?:\\r\\n|\\r|\\n)/g, \"&\");\r\n};\r\n\r\nconst getOpenrentLink = ({ postcode }) => {\r\n  if (!postcode) return null;\r\n  // eslint-disable-next-line prettier/prettier\r\n  const url = `https://www.openrent.co.uk/properties-to-rent/?term=${postcode}\r\narea=${RADIUS_MILES * KM_PER_MILE}\r\nprices_min=${MIN_PRICE}\r\nprices_max=${MAX_PRICE}\r\nbedrooms_min=${MIN_BEDROOMS}\r\nbedrooms_max=${MAX_BEDROOMS}\r\nsearchType=km\r\nfurnishedType=1`;\r\n  return url.replace(/(?:\\r\\n|\\r|\\n)/g, \"&\");\r\n};\r\n\r\nconst getZooplaLink = ({ postcode }) => {\r\n  if (!postcode) return null;\r\n  const url = `https://www.zoopla.co.uk/search/?q=${postcode}\r\nbeds_min=${MIN_BEDROOMS}\r\nbeds_max=${MAX_BEDROOMS}\r\nprice_frequency=per_month\r\nprice_min=${MIN_PRICE}\r\nprice_max=${MAX_PRICE}\r\nview_type=list\r\ncategory=residential\r\nsection=to-rent\r\nresults_sort=newest_listings\r\nsearch_source=home\r\nradius=${RADIUS_MILES}\r\nfurnished_state=furnished`;\r\n  return url.replace(/(?:\\r\\n|\\r|\\n)/g, \"&\");\r\n};\r\n\r\nconst getRightmoveLink = ({ postcode }) => {\r\n  if (!postcode) {\r\n    return null;\r\n  }\r\n  const outcode = postcode.split(\" \")[0];\r\n  const jsonInfo = outcodeData.find(\r\n    ({ outcode: jsonOutcode }) => jsonOutcode === outcode,\r\n  );\r\n  let codedOutcode;\r\n  if (jsonInfo) {\r\n    ({ code: codedOutcode } = jsonInfo);\r\n  } else {\r\n    return null;\r\n  }\r\n  const url = `https://www.rightmove.co.uk/property-to-rent/find.html?\r\nsearchType=RENT\r\nlocationIdentifier=OUTCODE%5E${codedOutcode}\r\ninsId=1\r\nradius=0\r\nminPrice=${MIN_PRICE}\r\nmaxPrice=${MAX_PRICE}\r\nminBedrooms=${MIN_BEDROOMS}\r\nmaxBedrooms=${MAX_BEDROOMS}\r\ndisplayPropertyType=\r\nmaxDaysSinceAdded=\r\nsortByPriceDescending=\r\nincludeLetAgreed=false\r\nprimaryDisplayPropertyType=\r\nsecondaryDisplayPropertyType=\r\noldDisplayPropertyType=\r\noldPrimaryDisplayPropertyType=\r\nletType=\r\nletFurnishType=furnished\r\nhouseFlatShare=\r\n`;\r\n  return url.replace(/(?:\\r\\n|\\r|\\n)/g, \"&\");\r\n};\r\n\r\nconst PropertyLink = ({ children, href }) =>\r\n  href && (\r\n    <a href={href} target=\"_blank\" rel=\"noopener noreferrer\">\r\n      {children}\r\n      <br />\r\n    </a>\r\n  );\r\n\r\nexport const OnthemarketLink = ({ postcode }) => (\r\n  <PropertyLink href={getOnthemarketLink({ postcode })}>\r\n    OnTheMarket\r\n  </PropertyLink>\r\n);\r\n\r\nexport const OpenrentLink = ({ postcode }) => (\r\n  <PropertyLink href={getOpenrentLink({ postcode })}>\r\n    OpenRent (min radius 2km)\r\n  </PropertyLink>\r\n);\r\n\r\nexport const RightmoveLink = ({ postcode }) => (\r\n  <PropertyLink href={getRightmoveLink({ postcode })}>\r\n    Rightmove (general area only)\r\n  </PropertyLink>\r\n);\r\n\r\nexport const ZooplaLink = ({ postcode }) => (\r\n  <PropertyLink href={getZooplaLink({ postcode })}>Zoopla</PropertyLink>\r\n);\r\n","/* eslint-disable react/no-array-index-key */\r\n/* eslint-disable no-restricted-syntax */\r\n/* eslint-disable no-underscore-dangle */\r\n/* eslint-disable @typescript-eslint/naming-convention */\r\n// /* eslint-disable prettier/prettier */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n// /* eslint-disable */\r\n\r\n// https://github.com/coryasilva/Leaflet.ExtraMarkers/issues/53#issuecomment-643551999\r\nimport L from \"leaflet\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport {\r\n  MapContainer,\r\n  TileLayer,\r\n  Marker,\r\n  Popup,\r\n  useMap,\r\n  Circle,\r\n  Polyline,\r\n  CircleMarker,\r\n} from \"react-leaflet\";\r\nimport \"./Map.css\";\r\n\r\nimport \"leaflet-polylineoffset\";\r\nimport Graph from \"graphology\";\r\n// import * as ExtraMarkers from \"leaflet-extra-markers\"; // or else TS complains about the L extension\r\nimport \"@fortawesome/fontawesome-free/css/all.css\"; // e.g. using FA icons\r\nimport \"leaflet-extra-markers/dist/css/leaflet.extra-markers.min.css\"; // Do the L extension.\r\n\r\nimport { LINE_COLORS } from \"../../constants\";\r\nimport {\r\n  lineModeDictionary,\r\n  // getStopPointsInfo,\r\n  getPostCodeFromLatLon,\r\n} from \"../../api\";\r\n\r\nimport {\r\n  OnthemarketLink,\r\n  OpenrentLink,\r\n  RightmoveLink,\r\n  ZooplaLink,\r\n} from \"../../properties\";\r\n\r\n// import the LEM css\r\nrequire(\"leaflet-extra-markers\");\r\n\r\nconst ATTRIBUTION =\r\n  // eslint-disable-next-line prettier/prettier\r\n  \"&copy; <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\";\r\n\r\nconst originMarker = L.ExtraMarkers.icon({\r\n  icon: \"fa-building\",\r\n  markerColor: \"blue\",\r\n  shape: \"square\",\r\n  prefix: \"fa\",\r\n});\r\nconst stopPointIcon = (icon) =>\r\n  L.ExtraMarkers.icon({\r\n    icon,\r\n    markerColor: \"red\",\r\n    shape: \"square\",\r\n    prefix: \"fa\",\r\n  });\r\n\r\nconst getIconName = (modes) => {\r\n  const modesList = new Set(modes);\r\n  if (\r\n    modesList.has(\"tube\") ||\r\n    modesList.has(\"dlr\") ||\r\n    modesList.has(\"overground\") ||\r\n    modesList.has(\"tram\")\r\n  ) {\r\n    return \"fa-subway\";\r\n  }\r\n  if (modesList.has(\"national-rail\" || modesList.has(\"tfl-rail\"))) {\r\n    return \"fa-train\";\r\n  }\r\n  if (modesList.has(\"river-bus\")) {\r\n    return \"fa-ship\";\r\n  }\r\n  if (modesList.has(\"bus\")) {\r\n    return \"fa-bus\";\r\n  }\r\n  return \"fa-bus\"; // default\r\n};\r\n\r\nconst SetView = ({ latLong }) => {\r\n  const map = useMap();\r\n  map.setView(latLong, map.getZoom(), { animate: true });\r\n  return null;\r\n};\r\n\r\n// useEffect(() => {\r\n//   console.log(\"postcodeInfo UPDATED\");\r\n// }, [postcodeInfo]);\r\nconst formatLineModes = (lineModes) => {\r\n  let s = \"\";\r\n  for (const [mode, lines] of Object.entries(lineModes)) {\r\n    s += `• ${mode} lines:\\n`;\r\n    for (const line of lines) {\r\n      s += ` ○ ${line}\\n`;\r\n    }\r\n  }\r\n  return s;\r\n};\r\n\r\nconst MapOriginMarkers = ({ originInfo }) =>\r\n  (originInfo && (\r\n    <>\r\n      <Marker position={originInfo.latLong} icon={originMarker}>\r\n        <Popup>\r\n          {originInfo.postcode} <br /> {JSON.stringify(originInfo.latLong)}\r\n        </Popup>\r\n      </Marker>\r\n      <SetView latLong={originInfo.latLong} />\r\n      <Circle center={originInfo.latLong} radius={originInfo.radius} />\r\n    </>\r\n  )) ||\r\n  null;\r\n\r\nconst MapNearbyStopPointMarkers = ({ nearbyStopPoints }) =>\r\n  nearbyStopPoints.map((stopPoint) => (\r\n    <Marker\r\n      position={[stopPoint.lat, stopPoint.lon]}\r\n      key={stopPoint.naptanId}\r\n      icon={stopPointIcon(getIconName(stopPoint.modes))}\r\n    >\r\n      <Popup>\r\n        {stopPoint.commonName}\r\n        <br />\r\n        Lines: {stopPoint.lines.map(({ name }) => name).join(\", \")}\r\n      </Popup>\r\n    </Marker>\r\n  ));\r\n\r\nconst MapLines = ({ mapLineSegments }) =>\r\n  (mapLineSegments &&\r\n    mapLineSegments.map((seg, i) => {\r\n      const lineWeight = 10;\r\n      const segmentWidth = seg.lineIds.length * lineWeight;\r\n      return (\r\n        <React.Fragment key={`pl-seg_${i}`}>\r\n          {seg.lineIds.map((lineId, j) => (\r\n            <Polyline\r\n              color={LINE_COLORS[lineId]}\r\n              positions={seg.lineCoords}\r\n              offset={j * lineWeight - segmentWidth / 2 + lineWeight / 2}\r\n              key={`pl-seg_${i}-line_${j}_${lineId}`}\r\n              weight={lineWeight}\r\n              // lineCap={\"butt\"}\r\n            />\r\n          ))}\r\n        </React.Fragment>\r\n      );\r\n    })) ||\r\n  null;\r\n\r\nconst MapStation = ({ station }) => {\r\n  const [postcode, setPostcode] = useState(null);\r\n  useEffect(() => {\r\n    (async () => {\r\n      const _postcode = await station.postcode;\r\n      if (!_postcode) {\r\n        console.error(\r\n          `Could not get postcode for station ${station.label} (${station.coords}).`,\r\n        );\r\n      } else {\r\n        setPostcode(_postcode);\r\n      }\r\n    })();\r\n  }, []);\r\n  return (\r\n    <CircleMarker\r\n      center={station.coords}\r\n      radius={10}\r\n      color=\"#000\"\r\n      fillColor=\"#ccc\"\r\n      fillOpacity={0.5}\r\n      opacity={0.5}\r\n      weight={4}\r\n      eventHandlers={{\r\n        click: async () => {\r\n          // console.log(station);\r\n        },\r\n      }}\r\n    >\r\n      <Popup>\r\n        <div style={{ whiteSpace: \"pre\" }}>\r\n          {station.label}\r\n          <br />\r\n          {(postcode && `${postcode}, `) || \"[Unknown postcode], \"}\r\n          Zone {station.zone}\r\n          <br />\r\n          {formatLineModes(station.lineModes)}\r\n          <RightmoveLink postcode={postcode} />\r\n          <ZooplaLink postcode={postcode} />\r\n          <OpenrentLink postcode={postcode} />\r\n          <OnthemarketLink postcode={postcode} />\r\n        </div>\r\n      </Popup>\r\n    </CircleMarker>\r\n  );\r\n};\r\n\r\nconst MapStations = ({ stations }) =>\r\n  (stations &&\r\n    stations.map((station) => (\r\n      <MapStation station={station} key={station.label} />\r\n    ))) ||\r\n  null;\r\n\r\nconst Map = ({ originInfo, nearbyStopPoints, graphSerialized }) => {\r\n  const [mapLineSegments, setMapLineSegments] = useState();\r\n  const [stations, setStations] = useState();\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (!graphSerialized) return;\r\n      const _displayedGraph = new Graph({ multi: true });\r\n      _displayedGraph.import(graphSerialized);\r\n      const _mapLineSegments = {};\r\n      _displayedGraph.forEachEdge((edge, { lineId }, fromNode, toNode) => {\r\n        const fromTo = [fromNode, toNode].sort().toString();\r\n        const { lat: fromLat, lon: fromLon } =\r\n          _displayedGraph.getNodeAttributes(fromNode);\r\n        const { lat: toLat, lon: toLon } =\r\n          _displayedGraph.getNodeAttributes(toNode);\r\n        if (!(fromTo in _mapLineSegments)) {\r\n          _mapLineSegments[fromTo] = {\r\n            lineCoords: [\r\n              [fromLat, fromLon],\r\n              [toLat, toLon],\r\n            ],\r\n            lineIds: [],\r\n          };\r\n        }\r\n        _mapLineSegments[fromTo].lineIds.push(lineId);\r\n      });\r\n      setMapLineSegments(Object.values(_mapLineSegments));\r\n      const lmd = await lineModeDictionary;\r\n      const _stations = [];\r\n      _displayedGraph.forEachNode((key, attributes) => {\r\n        const { lat, lon, lines, ...rest } = attributes;\r\n        const latLon = [lat, lon];\r\n        const postcode = getPostCodeFromLatLon(latLon);\r\n        const lineModes = {};\r\n        let modeName;\r\n        let lineName;\r\n        for (const { id } of lines) {\r\n          if (!(id in lmd)) {\r\n            modeName = \"[unknown mode]\";\r\n            lineName = id;\r\n            const info = `TFL did not return mode info for line \"${id}\" at station ${attributes.name}`;\r\n            console.error(info);\r\n            // toast.error(info, { id: info });\r\n          } else {\r\n            ({ modeName, lineName } = lmd[id]);\r\n          }\r\n          if (!(modeName in lineModes)) {\r\n            lineModes[modeName] = [];\r\n          }\r\n          lineModes[modeName].push(lineName);\r\n        }\r\n        _stations.push({ coords: latLon, postcode, lines, ...rest, lineModes });\r\n      });\r\n      setStations(_stations);\r\n    })();\r\n  }, [graphSerialized]);\r\n\r\n  return (\r\n    <MapContainer center={[51.505, -0.09]} zoom={13} scrollWheelZoom>\r\n      <TileLayer\r\n        attribution={ATTRIBUTION}\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n      {/* <MapNearbyStopPointMarkers nearbyStopPoints={nearbyStopPoints} /> */}\r\n      <MapLines mapLineSegments={mapLineSegments} />\r\n      <MapStations stations={stations} />\r\n      <MapOriginMarkers originInfo={originInfo} />\r\n    </MapContainer>\r\n  );\r\n};\r\nexport default Map;\r\n","/* eslint-disable no-await-in-loop */\r\n/* eslint-disable no-restricted-syntax */\r\n/* eslint-disable */\r\nimport Graph from \"graphology\";\r\nimport { reverse } from \"graphology-operators\";\r\nimport React from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { SigmaContainer, useSigma } from \"react-sigma-v2/lib/esm\";\r\nimport \"react-sigma-v2/lib/react-sigma-v2.css\";\r\nimport { getLinesFromModes, getRoutesOnLine } from \"../api\";\r\nimport {\r\n  EDGE_TYPE,\r\n  GRAPH_NODE_SIZE,\r\n  LINE_COLORS,\r\n  MODES_INFO_ALL,\r\n} from \"../constants\";\r\nimport { objectKeysToList, objectMap, setUnion } from \"../utils\";\r\n\r\nconst defaultSigmaContainerStyle = { height: \"500px\", width: \"100%\" };\r\n\r\nexport const mergeGraph = (inputGraph: Graph, outputGraph: Graph, setAttributes: string[] = []) => {\r\n  if (typeof inputGraph !== \"undefined\") {\r\n    inputGraph.forEachNode((node, attributes) => {\r\n      for (const setName of setAttributes){\r\n        let currentAttribute = new Set();\r\n        if (outputGraph.hasNode(node)){\r\n          currentAttribute = outputGraph.getNodeAttribute(node, setName) || new Set();\r\n        }\r\n        const incomingAttribute = inputGraph.getNodeAttribute(node, setName) || new Set();\r\n        const newAttribute = setUnion(currentAttribute, incomingAttribute);\r\n        if (newAttribute.size > 0){\r\n          attributes[setName] = newAttribute;\r\n        }\r\n      }\r\n      outputGraph.mergeNode(node, attributes);\r\n    });\r\n    inputGraph.forEachEdge((edge, attributes, fromNode, toNode) => {\r\n      const [resKey, resEdgeAdded, resSrcNodeAdded, resTargetNodeAdded] =\r\n        outputGraph.mergeEdgeWithKey(edge, fromNode, toNode, attributes);\r\n    });\r\n  }\r\n};\r\n\r\nexport const mergeGraphList = (graphList: Graph[]) => {\r\n  const isMulti = graphList.map(({ multi }) => multi).some((v) => v);\r\n  const outputGraph = new Graph({ multi: isMulti });\r\n  for (const graph of graphList) {\r\n    mergeGraph(graph, outputGraph);\r\n  }\r\n  return outputGraph;\r\n};\r\n\r\nexport const mergeGraphObject = (graphObject: Record<string, Graph>) => {\r\n  const isMulti = Object.values(objectMap(graphObject, ({ multi }: { multi: boolean }) => multi)).some((v) => v);\r\n  const outputGraph = new Graph({ multi: isMulti });\r\n  for (const graph of Object.values(graphObject)) {\r\n    mergeGraph(graph, outputGraph);\r\n  }\r\n  return outputGraph;\r\n};\r\n\r\nconst GraphFunction = ({\r\n  graph,\r\n  resetOnChange = true,\r\n}: {\r\n  graph: Graph;\r\n  resetOnChange?: boolean;\r\n}) => {\r\n  const sigma = useSigma();\r\n  const sigmaGraph = sigma.getGraph();\r\n  if (resetOnChange) sigmaGraph.clear();\r\n  mergeGraph(graph, sigmaGraph);\r\n  return null;\r\n};\r\n\r\nexport const GraphComponent = ({\r\n  graph,\r\n  style,\r\n}: {\r\n  graph: Graph;\r\n  style: Record<string, any>;\r\n}) => (\r\n  <SigmaContainer\r\n    initialSettings={{ renderEdgeLabels: true }}\r\n    style={{ ...defaultSigmaContainerStyle, ...style }}\r\n  >\r\n    <GraphFunction graph={graph} />\r\n  </SigmaContainer>\r\n);\r\n\r\nexport const getLineGraphFromLine = async ({\r\n  lineId,\r\n  direction,\r\n  branchDataKey = \"stationId\",\r\n  multi = true,\r\n}: {\r\n  lineId: LineId;\r\n  direction: Direction;\r\n  branchDataKey?: string;\r\n  multi?: boolean;\r\n}) => {\r\n  const lineGraph = new Graph({multi});\r\n  const routeSequence = await getRoutesOnLine(lineId);\r\n  const lineName = routeSequence.lineName;\r\n  if (routeSequence === null) return lineGraph;\r\n  if (!routeSequence.stopPointSequences.length){\r\n    const info =`TFL returned no data for line \"${lineName}\". Data for this line may be missing or incomplete.`\r\n    console.error(info);\r\n    toast.error(info, { id: info })\r\n  }\r\n  const lineColor =\r\n    LINE_COLORS[routeSequence.lineId] ||\r\n    MODES_INFO_ALL[routeSequence.mode].color;\r\n  const { mode: modeName } = routeSequence\r\n  for (const stopPointSequence of routeSequence.stopPointSequences) {\r\n    if (stopPointSequence.direction === direction) {\r\n      const stopPointArray = stopPointSequence.stopPoint;    \r\n      for (let i = 0; i < stopPointArray.length - 1; i += 1) {\r\n        const spFrom = stopPointArray[i];\r\n        const spTo = stopPointArray[i + 1];\r\n        if (i === 0) {\r\n          lineGraph.mergeNode(spFrom[branchDataKey], {\r\n            ...spFrom,\r\n            x: spFrom.lon,\r\n            y: spFrom.lat,\r\n            label: spFrom.name,\r\n            color: lineColor,\r\n            size: GRAPH_NODE_SIZE,\r\n          });\r\n        }\r\n        lineGraph.mergeNode(spTo[branchDataKey], {\r\n          ...spTo,\r\n          x: spTo.lon,\r\n          y: spTo.lat,\r\n          label: spTo.name,\r\n          color: lineColor,\r\n          size: GRAPH_NODE_SIZE,\r\n        });\r\n        const fromTo = [spFrom[branchDataKey], spTo[branchDataKey]]\r\n        // fromTo.sort();\r\n        lineGraph.mergeEdgeWithKey(\r\n          JSON.stringify({lineId, fromTo}),\r\n          // `${lineId}|${fromTo}`,\r\n          fromTo[0],\r\n          fromTo[1],\r\n          {\r\n            lineId,\r\n            modeName,\r\n            type: EDGE_TYPE,\r\n            size: 2,\r\n            color: lineColor,\r\n            label: lineName,\r\n            direction,\r\n          },\r\n        );\r\n      }\r\n    }\r\n  }\r\n  return lineGraph;\r\n};\r\n\r\nexport const makeLineGraphUndirected = (inputGraph: Graph) => {\r\n  const outputGraph = new Graph({multi: inputGraph.multi})\r\n  inputGraph.forEachNode((node, attributes) => {\r\n    outputGraph.mergeNode(node, attributes);\r\n  });\r\n  inputGraph.forEachEdge((edge, attributes, fromNode, toNode) => {\r\n    const edgeJson = JSON.parse(edge)\r\n    const { fromTo } = edgeJson\r\n    fromTo.sort()\r\n    outputGraph.mergeEdgeWithKey(JSON.stringify(edgeJson), fromTo[0], fromTo[1], attributes);\r\n  });\r\n  return outputGraph;\r\n}\r\n\r\nexport const getLineGraphObjectFromLineIdList = async (\r\n  lineIdList: LineId[],\r\n  directionList: Direction[] = [\"outbound\"],\r\n  reverseGraph = false,\r\n  multi = true,\r\n) => {\r\n  const lineGraphObject: Record<LineId, Graph> = {};\r\n  for (const lineId of lineIdList) {\r\n    for (const direction of directionList) {\r\n      let lineGraph = await getLineGraphFromLine({ lineId, direction, multi });\r\n      if (reverseGraph) lineGraph = reverse(lineGraph);\r\n      // console.log(JSON.parse(JSON.stringify(lineGraph)));\r\n      lineGraphObject[lineId] = lineGraph;\r\n    }\r\n  }\r\n  return lineGraphObject;\r\n};\r\n\r\nexport const getLineGraphListFromLineIdList = async (\r\n  lineIdList: LineId[],\r\n  directionList: Direction[] = [\"outbound\"],\r\n) =>\r\n  Object.values(\r\n    await getLineGraphObjectFromLineIdList(lineIdList, directionList),\r\n  );\r\n\r\nexport const setGraphListFromChosenModes = async (\r\n  chosenModes: any,\r\n  graphListSetter: any,\r\n  directionList: Direction[] = [\"outbound\"],\r\n) => {\r\n  const modesList = objectKeysToList(chosenModes);\r\n  if (modesList.length === 0) return;\r\n  const lineGraphList = await getLineGraphListFromLineIdList(\r\n    (await getLinesFromModes(modesList)).map(({ id }: { id: any }) => id),\r\n    directionList,\r\n    // \"stationId\",\r\n  );\r\n  graphListSetter(lineGraphList);\r\n};\r\n","/* eslint-disable react/require-default-props */\r\n/* eslint-disable @typescript-eslint/no-shadow */\r\n/* eslint-disable no-param-reassign */\r\n/* eslint-disable react/jsx-no-useless-fragment */\r\n/* eslint-disable no-restricted-syntax */\r\n// https://github.com/mui-org/material-ui/issues/17407#issuecomment-969029758\r\nimport React from \"react\";\r\n\r\nimport ChevronRight from \"@mui/icons-material/ChevronRight\";\r\nimport ExpandMore from \"@mui/icons-material/ExpandMore\";\r\nimport TreeItem from \"@mui/lab/TreeItem\";\r\nimport TreeView from \"@mui/lab/TreeView\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\n\r\nconst VERBOSE = false;\r\n\r\n// Get all children from the current node.\r\nfunction getAllChild(childNode: RenderTree | null, collectedNodes: any[] = []) {\r\n  if (childNode === null) return collectedNodes;\r\n  collectedNodes.push(childNode.id);\r\n  if (Array.isArray(childNode.children)) {\r\n    for (const node of childNode.children) {\r\n      getAllChild(node, collectedNodes);\r\n    }\r\n  }\r\n  return collectedNodes;\r\n}\r\n\r\nfunction goThroughAllNodes(nodes: RenderTree, map: Record<string, any> = {}) {\r\n  if (!nodes.children) {\r\n    return null;\r\n  }\r\n  map[nodes.id] = getAllChild(nodes).splice(1);\r\n  for (const childNode of nodes.children) {\r\n    goThroughAllNodes(childNode, map);\r\n  }\r\n  return map;\r\n}\r\n\r\n// recursive DFS\r\nfunction getNodeById(node: RenderTree, id: string, parentsPath: string[]): any {\r\n  let result = null;\r\n  if (node.id === id) {\r\n    return node;\r\n  }\r\n  if (Array.isArray(node.children)) {\r\n    for (const childNode of node.children) {\r\n      result = getNodeById(childNode, id, parentsPath);\r\n      if (result) {\r\n        parentsPath.push(node.id);\r\n        return result;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  return result;\r\n}\r\n\r\nconst getChildById = (nodes: RenderTree, id: string) => {\r\n  const array: string[] = [];\r\n  const path: string[] = [];\r\n\r\n  const nodeToToggle = getNodeById(nodes, id, path);\r\n  // console.log(path);\r\n  return { childNodesToToggle: getAllChild(nodeToToggle, array), path };\r\n};\r\n\r\nexport default ({\r\n  data,\r\n  stateGetter,\r\n  stateSetter,\r\n  defaultExpanded = [],\r\n}: {\r\n  data: RenderTree;\r\n  stateGetter: string[];\r\n  stateSetter: UseStateSetter<string[]>;\r\n  defaultExpanded?: string[];\r\n}) => {\r\n  // const [selected, setSelected] = React.useState<string[]>([]);\r\n  if (VERBOSE) console.log(stateGetter);\r\n  const selectedSet = React.useMemo(() => new Set(stateGetter), [stateGetter]);\r\n  const parentMap = React.useMemo(() => goThroughAllNodes(data), []);\r\n  // console.log(\"parentMap\", parentMap);\r\n\r\n  function getOnChange(checked: boolean, nodes: RenderTree) {\r\n    const { childNodesToToggle, path } = getChildById(data, nodes.id);\r\n    if (VERBOSE)\r\n      console.log(\"childNodesToChange\", { childNodesToToggle, checked });\r\n    let array = checked\r\n      ? [...stateGetter, ...childNodesToToggle]\r\n      : stateGetter\r\n          .filter((value) => !childNodesToToggle.includes(value))\r\n          .filter((value) => !path.includes(value));\r\n    array = array.filter((v, i) => array.indexOf(v) === i);\r\n    stateSetter(array);\r\n  }\r\n\r\n  const renderTree = (nodes: RenderTree) => {\r\n    const allSelectedChildren = parentMap?.[nodes.id]?.every(\r\n      (childNodeId: string) => selectedSet.has(childNodeId),\r\n    );\r\n    const checked = selectedSet.has(nodes.id) || allSelectedChildren || false;\r\n\r\n    const indeterminate =\r\n      parentMap?.[nodes.id]?.some((childNodeId: string) =>\r\n        selectedSet.has(childNodeId),\r\n      ) || false;\r\n\r\n    if (allSelectedChildren && !selectedSet.has(nodes.id)) {\r\n      if (VERBOSE) console.log(\"if allSelectedChildren\");\r\n      stateSetter([...stateGetter, nodes.id]);\r\n    }\r\n\r\n    return (\r\n      <TreeItem\r\n        key={nodes.id}\r\n        nodeId={nodes.id}\r\n        label={\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                checked={checked}\r\n                indeterminate={!checked && indeterminate}\r\n                onChange={(event) =>\r\n                  getOnChange(event.currentTarget.checked, nodes)\r\n                }\r\n                onClick={(e) => e.stopPropagation()}\r\n              />\r\n            }\r\n            label={<>{nodes.name}</>}\r\n            key={nodes.id}\r\n          />\r\n        }\r\n      >\r\n        {Array.isArray(nodes.children)\r\n          ? nodes.children.map((node) => renderTree(node))\r\n          : null}\r\n      </TreeItem>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <TreeView\r\n      defaultExpanded={defaultExpanded}\r\n      defaultExpandIcon={<ChevronRight />}\r\n      defaultCollapseIcon={<ExpandMore />}\r\n      style={{ textAlign: \"initial\" }}\r\n    >\r\n      {renderTree(data)}\r\n    </TreeView>\r\n  );\r\n};\r\n","/* eslint-disable no-restricted-syntax */\r\n/* eslint-disable no-await-in-loop */\r\n// @ts-nocheck\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport { MODES_DEFAULT, MODES_INFO_ALL } from \"../constants\";\r\nimport CheckBoxTreeView from \"./CheckBoxTreeView\";\r\nimport { components as LineComponents } from \"../types/Line\";\r\nimport { catchHttpError } from \"../utils\";\r\nimport { getModes, getLinesByModes } from \"../api\";\r\n\r\ntype Mode = LineComponents[\"schemas\"][\"Tfl\"];\r\ntype Line = LineComponents[\"schemas\"][\"Tfl-19\"];\r\n\r\n// const linesToModes = {};\r\n// {\r\n//   const modes = await getModes();\r\n//   let modeNames = modes.map(({ modeName }) => modeName);\r\n//   // remove elizabeth line result while api does not support it\r\n//   modeNames = modeNames.filter((modeName) => modeName !== \"elizabeth-line\");\r\n//   const lines = await getLinesByModes(modeNames);\r\n//   for (const { modeName, id: lineId } of lines) {\r\n//     if (lineId in linesToModes && linesToModes[lineId] !== modeName) {\r\n//       console.warn(`line ${lineId} already corresponds to mode ${modeName}`);\r\n//     } else {\r\n//       linesToModes[lineId] = modeName;\r\n//     }\r\n//   }\r\n// }\r\n// export { linesToModes };\r\n\r\nconst ModeCheckList = ({\r\n  stateGetter,\r\n  stateSetter,\r\n}: {\r\n  stateGetter: string[];\r\n  stateSetter: UseStateSetter<string[]>;\r\n}) => {\r\n  const useLines = false;\r\n\r\n  const parentId = \"parent:all\";\r\n  const parentLabel = \"All Modes\";\r\n\r\n  const [data, setData] = useState<RenderTree | undefined>();\r\n  // const defaultExpanded = [parentId];\r\n  const defaultExpanded: string[] = [];\r\n  useEffect(() => {\r\n    (async () => {\r\n      const modeLineTree: RenderTree = {\r\n        id: parentId,\r\n        name: parentLabel,\r\n        children: [],\r\n      };\r\n      let modes: Mode[] = [];\r\n\r\n      modes = (await catchHttpError(getModes)()) as unknown as Mode[];\r\n      const modeNames = modes\r\n        .filter(\r\n          (mode) =>\r\n            mode.isScheduledService &&\r\n            mode.isFarePaying &&\r\n            (mode.isTflService || mode.modeName === \"national-rail\"),\r\n        )\r\n        .map(({ modeName }) => modeName)\r\n        .filter(\r\n          (modeName) =>\r\n            MODES_INFO_ALL[modeName] && !MODES_INFO_ALL[modeName].hidden,\r\n        );\r\n\r\n      const chosenByDefault = modeNames.filter(\r\n        (modeName) => MODES_DEFAULT[modeName],\r\n      );\r\n      stateSetter(chosenByDefault);\r\n\r\n      const children: RenderTree[] = [];\r\n      for (const modeName of modeNames) {\r\n        const child: RenderTree = {\r\n          id: modeName,\r\n          name: MODES_INFO_ALL[modeName].label || modeName,\r\n        };\r\n        if (useLines) {\r\n          const grandchildren = (\r\n            (await getLinesByModes([modeName])) as Line[]\r\n          ).map(({ id, name }) => ({\r\n            id,\r\n            name,\r\n          }));\r\n          child.children = grandchildren;\r\n        }\r\n        children.push(child);\r\n      }\r\n      modeLineTree.children = children;\r\n\r\n      setData(modeLineTree);\r\n    })();\r\n  }, []);\r\n\r\n  if (data!) {\r\n    return (\r\n      <CheckBoxTreeView\r\n        data={data}\r\n        stateGetter={stateGetter}\r\n        stateSetter={stateSetter}\r\n        defaultExpanded={defaultExpanded}\r\n      />\r\n    );\r\n  }\r\n  return <>Loading mode checklist...</>;\r\n};\r\nexport default ModeCheckList;\r\n","/* eslint no-plusplus: [\"error\", { \"allowForLoopAfterthoughts\": true }] */\r\n/* eslint-disable func-names */\r\n/* eslint-disable no-underscore-dangle */\r\n/* eslint-disable @typescript-eslint/naming-convention */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable object-curly-newline */\r\n/* eslint-disable max-len */\r\n/* eslint-disable guard-for-in */\r\n/* eslint-disable no-await-in-loop */\r\n/* eslint-disable no-restricted-syntax */\r\n/* eslint-disable no-param-reassign */\r\n// /* eslint-disable */\r\n// @ts-nocheck\r\nimport React, { useState, useEffect } from \"react\";\r\n// import React, { useState } from \"react\";\r\n// import Button from \"react-bootstrap/Button\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\n\r\nimport Graph from \"graphology\";\r\nimport { dfsFromNode } from \"graphology-traversal/dfs\";\r\nimport subgraph from \"graphology-operators/subgraph\";\r\nimport reverse from \"graphology-operators/reverse\";\r\n\r\nimport Button from \"@mui/material/Button\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport TextField from \"@mui/material/TextField\";\r\n// import Box from \"@mui/material/Box\";\r\nimport Paper from \"@mui/material/Paper\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  NAPTAN_STOPTYPES,\r\n  DEFAULT_POSTCODE,\r\n  DEFAULT_RADIUS,\r\n  LINE_COLORS,\r\n  // GRAPH_NODE_SIZE_POI,\r\n} from \"../../constants\";\r\n\r\n// import logo from './logo.svg';\r\nimport logo from \"../../tfl_roundel_no_text.svg\";\r\nimport \"./App.css\";\r\nimport { mapArrayOfKeysToObject, setNestedObject } from \"../../utils\";\r\nimport Map from \"../Map/Map\";\r\n\r\nimport {\r\n  getLatLonFromPostCode,\r\n  getStopPointsByRadius,\r\n  filterStopPoints,\r\n  // lineModeDictionary,\r\n} from \"../../api\";\r\n\r\nimport {\r\n  getLineGraphObjectFromLineIdList,\r\n  // GraphComponent,\r\n  mergeGraphObject,\r\n  mergeGraph,\r\n  makeLineGraphUndirected,\r\n} from \"../Graphs\";\r\n\r\nimport { components as StopPointComponents } from \"../../types/StopPoint\";\r\nimport { components as LineComponents } from \"../../types/Line\";\r\nimport ModeCheckList from \"../ModeCheckList\";\r\n\r\n// type LineModeGroup = StopPointComponents[\"schemas\"][\"Tfl-8\"];\r\ntype StopPoint = StopPointComponents[\"schemas\"][\"Tfl-11\"];\r\ntype MatchedStop = LineComponents[\"schemas\"][\"Tfl-20\"];\r\n\r\nconst mergeStopPoint = (\r\n  graph: Graph,\r\n  stopPoint: MatchedStop,\r\n  lineName: string,\r\n) => {\r\n  const branchDataKey = \"stationId\";\r\n  graph.mergeNode(stopPoint[branchDataKey], {\r\n    ...stopPoint,\r\n    x: stopPoint.lon,\r\n    y: stopPoint.lat,\r\n    label: stopPoint.name,\r\n    color: LINE_COLORS[lineName],\r\n  });\r\n};\r\n\r\nconst withToast = (fn: any, info: any, show = true) =>\r\n  async function (...args: any[]) {\r\n    const promise = fn(...args);\r\n    if (show) {\r\n      toast.promise(promise, {\r\n        loading: info,\r\n        success: info,\r\n        error: info,\r\n      });\r\n    }\r\n    return promise;\r\n  };\r\n\r\nconst App = () => {\r\n  const [info, setInfo] = useState(\"Waiting for search...\");\r\n  const [isBusy, setBusy] = useState(true);\r\n\r\n  // const [formData[\"destination-postcode\"], setPostcode] = useState(DEFAULT_POSTCODE);\r\n  // const [formData[\"destination-radius\"], setRadius] = useState(DEFAULT_RADIUS);\r\n\r\n  const [displayedGraph, setDisplayedGraph] = useState(new Graph());\r\n  // const [reverseGraph, setReverseGraph] = useState(true);\r\n  // const reverseGraph = false;\r\n\r\n  // map data\r\n  const [originInfo, setOriginInfo] =\r\n    useState<{ postcode: string; latLong: LatLon; radius: number }>();\r\n  const [nearbyStopPoints, setNearbyStopPoints] = useState<StopPoint[]>([]);\r\n  const [graphSerialized, setGraphSerialized] = useState<any>();\r\n\r\n  const [getModeCheckList, setModeCheckList] = useState<string[]>([]);\r\n  const [formData, setFormData] = useState({\r\n    \"destination-postcode\": DEFAULT_POSTCODE,\r\n    \"destination-radius\": DEFAULT_RADIUS,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // (async () => {\r\n    // })();\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const params = Object.fromEntries(urlParams);\r\n    setFormData({ ...formData, ...params });\r\n    setBusy(false);\r\n  }, []);\r\n\r\n  const handleFormChange = (e, value = null) => {\r\n    setFormData({\r\n      ...formData,\r\n      [e.target.name]: value !== null ? value : e.target.value,\r\n    });\r\n  };\r\n\r\n  const handleRadiusChange = (e) => {\r\n    // const handleRadiusChange = (e) => {\r\n    // https://stackoverflow.com/a/43177957\r\n    const onlyInts = e.target.value.replace(/[^0-9]/g, \"\");\r\n    setRadius(+onlyInts);\r\n    handleFormChange(e, onlyInts);\r\n    // setFormData({ ...formData, [e.target.name]: onlyInts });\r\n  };\r\n\r\n  const handleButtonClick = async (e) => {\r\n    e.preventDefault();\r\n    const form = e.target;\r\n    const _formData = new FormData(form);\r\n    const queryString = new URLSearchParams(formData).toString();\r\n    window.history.pushState({}, \"\", `?${queryString}`);\r\n    // return;\r\n\r\n    let _info;\r\n    const toastId = \"toast\";\r\n\r\n    // convert postcode to latitude, longitude\r\n    _info = `Getting latitude/longitude of postcode ${formData[\"destination-postcode\"]}...`;\r\n    setInfo(_info);\r\n    toast.loading(_info, { id: toastId });\r\n    const latLong = await getLatLonFromPostCode(\r\n      formData[\"destination-postcode\"],\r\n    );\r\n    if (latLong) {\r\n      toast.success(_info, { id: toastId });\r\n    } else {\r\n      _info = `Postcode \"${formData[\"destination-postcode\"]}\" not found`;\r\n      setInfo(_info);\r\n      toast.error(_info, { id: toastId });\r\n      return;\r\n    }\r\n\r\n    setOriginInfo({\r\n      postcode: formData[\"destination-postcode\"],\r\n      latLong,\r\n      radius: formData[\"destination-radius\"],\r\n    });\r\n\r\n    // get list of stopPoints within radius\r\n    _info = `Searching for stops within ${\r\n      formData[\"destination-radius\"]\r\n    } metres of ${formData[\"destination-postcode\"]} (${JSON.stringify(\r\n      latLong,\r\n    )})...`;\r\n    setInfo(_info);\r\n    toast.loading(_info, { id: toastId });\r\n    let stopPoints = await getStopPointsByRadius(\r\n      NAPTAN_STOPTYPES,\r\n      latLong,\r\n      formData[\"destination-radius\"],\r\n    );\r\n    toast.success(_info, { id: toastId });\r\n    // console.log(JSON.parse(JSON.stringify({ stopPoints })));\r\n\r\n    // check for no result\r\n    if (stopPoints.length === 0) {\r\n      setInfo(\r\n        `No stops found within ${formData[\"destination-radius\"]} metres of postcode ${formData[\"destination-postcode\"]}`,\r\n      );\r\n      return;\r\n    }\r\n\r\n    const chosenModesSet = new Set(getModeCheckList);\r\n    stopPoints = await filterStopPoints(\r\n      stopPoints,\r\n      chosenModesSet,\r\n      undefined,\r\n      undefined,\r\n    );\r\n    setNearbyStopPoints(stopPoints);\r\n\r\n    const summary = stopPoints.map(({ commonName, distance }) => ({\r\n      commonName,\r\n      distance: typeof distance !== \"undefined\" ? Math.round(distance) : \"???\",\r\n    }));\r\n    summary.sort((a, b) => (a.distance > b.distance ? 1 : -1));\r\n    const summaryText = summary.map(\r\n      ({ commonName, distance }) => `${commonName} (${distance}m)`,\r\n    );\r\n    setInfo(\r\n      `Stops within ${formData[\"destination-radius\"]} metres of postcode ${\r\n        formData[\"destination-postcode\"]\r\n      } (${JSON.stringify(latLong)}): ${summaryText.join(\", \")}`,\r\n    );\r\n\r\n    _info = \"Plotting map...\";\r\n    toast.loading(_info, { id: toastId });\r\n    // organise the nearby stopPoints by mode and line; {mode: {line: [stopPoint]}}\r\n    const nearbyLineIdList: string[] = [];\r\n    const nearbyStopPointsOnLines: Record<\r\n      ModeId,\r\n      Record<LineId, StopPoint[]>\r\n    > = {};\r\n    for (const stopPoint of stopPoints) {\r\n      for (const { modeName, lineIdentifier } of stopPoint.lineModeGroups) {\r\n        if (chosenModesSet.has(modeName)) {\r\n          for (const line of lineIdentifier) {\r\n            if (\r\n              typeof nearbyStopPointsOnLines?.[modeName]?.[line] === \"undefined\"\r\n            ) {\r\n              setNestedObject(nearbyStopPointsOnLines, [modeName, line], []);\r\n              nearbyLineIdList.push(line);\r\n            }\r\n            nearbyStopPointsOnLines[modeName][line].push(stopPoint);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const multi = true;\r\n    // const directions: Direction[] = [\"outbound\"];\r\n    // const directions: Direction[] = [\"inbound\"];\r\n    const directions: Direction[] = [\"inbound\", \"outbound\"];\r\n\r\n    let finalGraphOutward = new Graph({ multi });\r\n    let finalGraphInward = new Graph({ multi });\r\n\r\n    for (const reverseGraph of [true, false]) {\r\n      // for (const reverseGraph of [false]) {\r\n      const finalGraphDirections: Record<string, Graph> =\r\n        mapArrayOfKeysToObject(directions, () => new Graph({ multi }));\r\n\r\n      for (const direction of directions) {\r\n        const lineGraphObjectInDirection =\r\n          await getLineGraphObjectFromLineIdList(\r\n            nearbyLineIdList,\r\n            [direction],\r\n            reverseGraph,\r\n            false,\r\n          );\r\n\r\n        finalGraphDirections[direction] = new Graph({ multi });\r\n\r\n        for (const modeName in nearbyStopPointsOnLines) {\r\n          for (const lineId in nearbyStopPointsOnLines[modeName]) {\r\n            const stopPointsReachableFromNearbyStopPointsOnLineGraph =\r\n              new Graph({ multi });\r\n            const graphDirectionLine = lineGraphObjectInDirection[lineId];\r\n            for (const stopPoint of nearbyStopPointsOnLines[modeName][lineId]) {\r\n              // console.log(\r\n              //   `Graphing line \"${lineName}\" stop \"${stopPoint.commonName}\" (${stopPoint.stationNaptan}) in direction \"${direction}\" (reverseGraph=${reverseGraph})`,\r\n              // );\r\n              if (graphDirectionLine.hasNode(stopPoint.stationNaptan)) {\r\n                dfsFromNode(\r\n                  graphDirectionLine,\r\n                  stopPoint.stationNaptan,\r\n                  (node, attr) => {\r\n                    mergeStopPoint(\r\n                      stopPointsReachableFromNearbyStopPointsOnLineGraph,\r\n                      attr as MatchedStop,\r\n                      lineId,\r\n                    );\r\n                  },\r\n                );\r\n              } else {\r\n                // console.log(\"Not found\");\r\n              }\r\n            }\r\n            // let sub = graphDirectionLine;\r\n            // sub = makeLineGraphUndirected(sub);\r\n            const sub = subgraph(\r\n              graphDirectionLine,\r\n              stopPointsReachableFromNearbyStopPointsOnLineGraph.nodes(),\r\n            );\r\n            // for (const stopPoint of nearbyStopPointsOnLines[modeName][\r\n            //   lineId\r\n            // ]) {\r\n            //   sub.mergeNode(stopPoint.stationNaptan, {\r\n            //     size: GRAPH_NODE_SIZE_POI,\r\n            //   });\r\n            // }\r\n            mergeGraph(sub, finalGraphDirections[direction]);\r\n          }\r\n        }\r\n      }\r\n      let finalGraphMerged = mergeGraphObject(finalGraphDirections);\r\n      if (reverseGraph) {\r\n        finalGraphMerged = reverse(finalGraphMerged);\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        finalGraphInward = finalGraphMerged;\r\n      } else {\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        finalGraphOutward = finalGraphMerged;\r\n      }\r\n    }\r\n    const _displayedGraph = finalGraphOutward;\r\n\r\n    setDisplayedGraph(_displayedGraph.copy()); // changes input for some reason, so pass a copy\r\n    setGraphSerialized(makeLineGraphUndirected(_displayedGraph).export());\r\n    toast.success(_info, { id: toastId });\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\" || e.key === \"Escape\") {\r\n      if (e.key === \"Enter\") {\r\n        const { form } = e.target;\r\n        const index = [...form].indexOf(e.target);\r\n        for (let i = index + 1; i < form.length; i++) {\r\n          const element = form.elements[i];\r\n          if (element.localName === \"input\") {\r\n            element.focus();\r\n            break;\r\n          }\r\n        }\r\n        e.preventDefault();\r\n      } else {\r\n        e.target.blur();\r\n      }\r\n    }\r\n  };\r\n\r\n  // const handleFormUpdate = (e) => {};\r\n  if (isBusy) return null;\r\n  return (\r\n    <Container maxWidth=\"md\" className=\"App\">\r\n      <Paper>\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n          transit-tool\r\n        </Typography>\r\n        <ModeCheckList\r\n          stateGetter={getModeCheckList}\r\n          stateSetter={setModeCheckList}\r\n        />\r\n        <Paper\r\n          elevation={3}\r\n          component=\"form\"\r\n          onSubmit={handleButtonClick}\r\n          sx={{ \"& .MuiTextField-root\": { m: 1, width: \"25ch\" } }}\r\n          // noValidate\r\n          // autoComplete=\"off\"\r\n        >\r\n          <Typography variant=\"h5\">Destination</Typography>\r\n          <div>\r\n            <TextField\r\n              id=\"input-destination-postcode\"\r\n              name=\"destination-postcode\"\r\n              label=\"Destination Postcode\"\r\n              variant=\"outlined\"\r\n              defaultValue={formData[\"destination-postcode\"]}\r\n              onBlur={handleFormChange}\r\n              onKeyDown={handleKeyDown}\r\n              error={!formData[\"destination-postcode\"]}\r\n            />\r\n          </div>\r\n          <div>\r\n            <TextField\r\n              id=\"input-destination-radius\"\r\n              name=\"destination-radius\"\r\n              label=\"Destination Search Radius\"\r\n              variant=\"outlined\"\r\n              value={formData[\"destination-radius\"]}\r\n              onChange={handleRadiusChange}\r\n              onKeyDown={handleKeyDown}\r\n              InputProps={{\r\n                endAdornment: <InputAdornment position=\"end\">m</InputAdornment>,\r\n              }}\r\n              error={formData[\"destination-radius\"] <= 0}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n              // onClick={handleButtonClick}\r\n              disabled={\r\n                formData[\"destination-radius\"] <= 0 ||\r\n                !formData[\"destination-postcode\"]\r\n              }\r\n            >\r\n              Get Data\r\n            </Button>\r\n          </div>\r\n        </Paper>\r\n\r\n        <p>{info}</p>\r\n        <Map\r\n          originInfo={originInfo}\r\n          nearbyStopPoints={nearbyStopPoints}\r\n          graphSerialized={graphSerialized}\r\n        />\r\n        {/* <GraphComponent graph={displayedGraph} style={{}} /> */}\r\n        <p>Powered by TfL Open Data</p>\r\n        <p>\r\n          Contains OS data © Crown copyright and database rights (2016) and\r\n          Geomni UK Map data © and database rights (2019)\r\n        </p>\r\n      </Paper>\r\n      <Toaster />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { red } from \"@mui/material/colors\";\r\nimport { createTheme } from \"@mui/material/styles\";\r\n// A custom theme for this app\r\nconst theme = createTheme({\r\n  palette: {\r\n    mode: \"dark\",\r\n    primary: {\r\n      main: \"#61dafb\",\r\n      light: \"#61dafb\",\r\n      dark: \"#21a1c4\",\r\n    },\r\n    secondary: {\r\n      main: \"#b5ecfb\",\r\n      light: \"#61dafb\",\r\n      dark: \"#21a1c4\",\r\n    },\r\n    error: { main: red.A400 },\r\n    background: { default: \"#282c34\" },\r\n  },\r\n  components: {\r\n    MuiPaper: {\r\n      styleOverrides: {\r\n        root: {\r\n          padding: \"20px 10px\",\r\n          margin: \"10px\",\r\n          // backgroundColor: \"#fff\", // 5d737e\r\n        },\r\n      },\r\n    },\r\n    MuiButton: { styleOverrides: { root: { margin: \"5px\" } } },\r\n  },\r\n});\r\nexport default theme;\r\n","/* eslint-disable */\r\nconst reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport { ThemeProvider } from \"@mui/material/styles\";\r\nimport App from \"./components/App/App\";\r\n// import App from \"./components/test\";\r\n// import App from \"./components/GraphScreen/GraphScreen\";\r\n// import App from \"./components/CheckBoxTreeView\";\r\nimport theme from \"./theme\";\r\n\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <App />\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\"),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}